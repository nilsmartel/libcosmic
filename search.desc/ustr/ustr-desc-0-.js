searchState.loadedDescShard("ustr", 0, "Fast, FFI-friendly string interning. A <code>Ustr</code> (<strong>U</strong>nique <strong>Str</strong>) …\nThe type used for the global string cache.\nA handle representing a string in the global string cache.\nA standard <code>HashMap</code> using <code>Ustr</code> as the key type with a …\nA standard <code>HashSet</code> using <code>Ustr</code> as the key type with a …\nGet the cached string as a C <code>char*</code>.\nGet this <code>Ustr</code> as a <code>CStr</code>\nGet the cached <code>Ustr</code> as a <code>str</code>.\nUtility function to get a reference to the main cache …\nCreate a new <code>Ustr</code> from the given <code>str</code> but only if it …\nReturns the argument unchanged.\nCreate a new <code>Ustr</code> from the given <code>str</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the length is zero.\nGet the length (in bytes) of this string.\nReturns the number of unique strings in the cache.\nGet the precomputed hash for this string.\nReturn an iterator over the entire string cache.\nGet an owned String copy of this string.\nReturns the total amount of memory allocated and in use by …\nReturns the total amount of memory reserved by the cache …\nCreate a new <code>Ustr</code> from the given <code>str</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")
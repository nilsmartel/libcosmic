searchState.loadedDescShard("cosmic", 12, "Returns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a pixel from the 4 channels a, b, c and d. If …\nDecodes an encoded image into a dynamic image.\nReturn the image format specified by a path’s file …\nConstructs a new ImageBuffer by repeated application of …\nReturn the image format specified by a MIME type.\nCreate a delay from a ratio of milliseconds.\nConstructs a new frame\nReturn the image format specified by the path’s file …\nConstructs a new ImageBuffer by copying a pixel\nConstructs a buffer from a generic container (for example …\nConvert from a duration, clamped between 0 and an …\nReturns a view into a slice.\nReturns mutable view into a mutable slice.\nCreates an image buffer out of an existing buffer. Returns …\nGet a mutable reference to a single sample.\nReturns the pixel located at (x, y). Indexed from top left.\nGets a reference to the pixel at location <code>(x, y)</code>\nGets a reference to the pixel at location <code>(x, y)</code> or …\nGets a reference to the mutable pixel at location <code>(x, y)</code>. …\nGets a reference to the mutable pixel at location <code>(x, y)</code>\nDo not use is function: It is unimplemented!\nGets a reference to the mutable pixel at location <code>(x, y)</code> …\nGet a reference to a single sample.\nReturn a grayscale version of this image. Returns <code>Luma</code> …\nGuess image format from memory block\nIf there are any samples aliasing each other.\nReturns if there is an alpha channel.\nReturns false if the color scheme is grayscale, true …\nThe height of this image.\nThe height of this image.\nReturns the height of the underlying image\nHue rotate the supplied image. <code>value</code> is the degrees to …\nReturns the ICC color profile embedded in the image\nRead a tuple containing the (width, height) of the image …\nMutable portion of the buffer that holds sample values.\nReturn the portion of the buffer that holds sample values.\nImage Processing Functions\nReturns true if this x, y coordinate is contained inside …\nCheck that the pixel and the channel index are in bounds.\nGet an index provided it is inbouds.\nReturn a reference to a single sample at specified …\nResolve the index of a particular sample.\nGet the theoretical position of sample (x, y, channel).\nReturn a mutable reference to a single sample at specified …\nGet a reference to the underlying image.\nGet a mutable reference to the underlying image.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the image buffer\nReturn this image’s pixels as a byte vector. If the …\nReturn the raw sample buffer with its stride an dimension …\nConsume the decoder producing a series of frames.\nConsume the image and returns a Luma image.\nConsume the image and returns a Luma image.\nConsume the image and returns a LumaA image.\nConsume the image and returns a LumaA image.\nReturns the underlying raw buffer\nReturns a reader that can be used to obtain the bytes of …\nConsume the image and returns a RGB image.\nConsume the image and returns a RGB image.\nConsume the image and returns a RGB image.\nConsume the image and returns a RGBA image.\nConsume the image and returns a RGBA image.\nConsume the image and returns a RGBA image.\nConsumes the image buffer and returns the underlying data …\nInvert this pixel\nInvert the colors of this image. This method operates …\nInput and output of images.\nCheck if a buffer fulfills the requirements of a normal …\nA <code>repr(C)</code> description of the layout of buffer samples.\nReturns the x offset\nCreate a new image from a Reader.\nCreate a new image from a byte slice\nCreate a new image from a byte slice\nApply the function <code>f</code> to each channel of this pixel.\nApply the function <code>f</code> to each channel of this pixel and …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nMathematical helper functions and types.\nGet the minimum length of a buffer such that all in-bounds …\nCreates a new <code>Frames</code> from an implementation specific …\nConstructs a new frame without any delay.\nCreates a new image buffer based on a <code>Vec&lt;P::Subpixel&gt;</code>.\nCreates a dynamic image backed by a buffer depending on …\nConstruct a new subimage The coordinates set the position …\nCreates a dynamic image backed by a buffer of gray pixels.\nCreates a dynamic image backed by a buffer of gray pixels.\nCreates a dynamic image backed by a buffer of gray pixels …\nCreates a dynamic image backed by a buffer of gray pixels …\nCreates a dynamic image backed by a buffer of RGB pixels.\nCreates a dynamic image backed by a buffer of RGB pixels.\nCreates a dynamic image backed by a buffer of RGB pixels.\nCreates a dynamic image backed by a buffer of RGBA pixels.\nCreates a dynamic image backed by a buffer of RGBA pixels.\nCreates a dynamic image backed by a buffer of RGBA pixels.\nThe numerator and denominator of the delay in milliseconds.\nThe offsets of this subimage relative to the underlying …\nOpen the image located at the path specified. The image’…\nReturns the color type of the image file before decoding\nReturns an Iterator over the pixels of this image. The …\nReturns an iterator over the pixels of this image. The …\nReturns an iterator over the mutable pixels of this image.\nPut a pixel at location (x, y). Indexed from top left.\nPuts a pixel at location <code>(x, y)</code>\nReturns all the bytes in the image.\nSame as <code>read_image</code> but periodically calls the provided …\nDecode a rectangular section of the image; see …\nDecode a rectangular section of the image, periodically …\nReturn the ImageFormats which are enabled for reading.\nCalculate a measure for remaining decoding work.\nResize this image using the specified filter algorithm. …\nResize this image using the specified filter algorithm. …\nResize this image using the specified filter algorithm. …\nRotate this image 180 degrees clockwise.\nRotate this image 270 degrees clockwise.\nRotate this image 90 degrees clockwise.\nReturns an iterator over the rows of this image.\nReturns an iterator over the mutable rows of this image.\nGet the format of the buffer when viewed as a matrix of …\nUnderlying linear container holding sample values.\nSaves the buffer to a file at the path specified.\nSaves the buffer to a file at the path specified.\nSaves the supplied buffer to a file at the path specified.\nSaves the supplied buffer to a file at the path specified …\nSaves the buffer to a file at the specified path in the …\nSaves the buffer to a file at the specified path in the …\nReturns the minimum number of bytes that can be …\nSet decoding limits for this decoder. See <code>Limits</code> for the …\nShrink the image to the minimum of current and given …\nGet the strides for indexing matrix-like <code>[(c, w, h)]</code>.\nReturns a mutable subimage that is a view into this image. …\nCreate a mutable sub-view of the image.\nScale this image down to fit within a specific size. …\nScale this image down to a specific size. Returns a new …\nReturn a copy of this image’s pixels as a byte vector. …\nConvert this subimage to an ImageBuffer\nConvert this pixel to luma\nReturns a copy of this image as a Luma image.\nReturns a copy of this image as a Luma image.\nReturns a copy of this image as a Luma image.\nConvert this pixel to luma with an alpha channel\nReturns a copy of this image as a LumaA image.\nReturns a copy of this image as a LumaA image.\nReturns a copy of this image as a LumaA image.\nReturn the MIME type for this image format or “…\nConvert this pixel to RGB\nReturns a copy of this image as an RGB image.\nReturns a copy of this image as an RGB image.\nReturns a copy of this image as an RGB image.\nConvert this pixel to RGB with an alpha channel\nReturns a copy of this image as an RGBA image.\nReturns a copy of this image as an RGBA image.\nReturns a copy of this image as an RGBA image.\nCopy the data into an owned vector.\nReturns the y offset\nA measure of all necessary decoding work.\nReturns the total number of bytes in the decoded image.\nMove the data into an image buffer.\nReturns the pixel located at (x, y). Indexed from top left.\nReturns the pixel located at (x, y), ignoring bounds …\nPuts a pixel at location (x, y). Indexed from top left.\nPuts a pixel at location (x, y), ignoring bounds checking.\nPerforms an unsharpen mask on this image. <code>sigma</code> is the …\nReturns a subimage that is an immutable view into this …\nCreate a sub-view of the image.\nThe width of this image.\nThe width of this image.\nReturns the width of the underlying image\nCreate a monocolor image from a single pixel.\nWrites the supplied buffer to a writer in the specified …\nWrites all the bytes in an image to the encoder.\nWrites the buffer to a writer in the specified format.\nEncode this image and write it to <code>w</code>.\nWrites the buffer with the given encoder.\nEncode this image with the provided encoder.\nReturn the ImageFormats which are enabled for writing.\nProvides color conversions for whole image buffers.\nEnumerate the pixels of an image.\nEnumerate the pixels of an image.\nEnumerate the rows of an image.\nEnumerate the rows of an image.\nIterate over pixel refs.\nIterate over mutable pixel refs.\nIterate over rows of an image\nIterate over mutable rows of an image\nConverts <code>self</code> to a buffer of type T\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecoding and Encoding of BMP Images\nDecoding of DDS images\nDecoding of DXT (S3TC) compression\nDecoding of farbfeld images\nDecoding of GIF Images\nDecoding of Radiance HDR Images\nDecoding and Encoding of ICO files\nDecoding and Encoding of JPEG Images\nDecoding of OpenEXR (.exr) Images\nDecoding and Encoding of PNG Images\nDecoding of netpbm image formats (pbm, pgm, ppm and pam).\nDecoding and encoding of QOI images\nDecoding of TGA Images\nDecoding and Encoding of TIFF Images\nDecoding and Encoding of WebP Images\nA bmp decoder\nThe representation of a BMP encoder.\nEncodes the image <code>image</code> that has dimensions <code>width</code> and …\nSame as <code>encode</code>, but allow a palette to be passed in. The …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the palette that is embedded in the BMP image, if any.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new decoder that decodes from the stream <code>r</code>\nCreate a new encoder that writes its output to <code>w</code>.\nCreate a new decoder that decodes from the stream <code>r</code> …\nIf true, the palette in BMP does not apply to the image …\nThe representation of a DDS decoder\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new decoder that decodes from the stream <code>r</code>\nThe DXT1 format. 48 bytes of RGB data in a 4x4 pixel …\nThe DXT3 format. 64 bytes of RGBA data in a 4x4 pixel …\nThe DXT5 format. 64 bytes of RGBA data in a 4x4 pixel …\nDXT decoder\nDXT encoder\nDXT reader\nWhat version of DXT compression are we using? Note that …\nReturns the color type that is stored in this DXT variant\nEncodes the image data <code>data</code> that has dimensions <code>width</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new DXT decoder that decodes from the stream <code>r</code>. …\nCreate a new encoder that writes its output to <code>w</code>\nfarbfeld decoder\nfarbfeld encoder\nfarbfeld Reader\nEncodes the image <code>data</code> (native endian) that has dimensions …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new decoder that decodes from the stream <code>r</code>\nCreate a new encoder that writes its output to <code>w</code>. The …\nFinite number of repetitions\nGIF decoder\nGIF encoder.\nWrapper struct around a <code>Cursor&lt;Vec&lt;u8&gt;&gt;</code>\nLooping GIF\nNumber of repetitions for a GIF animation\nEncode a single image.\nEncode one frame of animation.\nEncodes Frames. Consider using <code>try_encode_frames</code> instead …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new decoder that decodes the input steam <code>r</code>\nCreates a new GIF encoder with a speed of 1. This …\nCreate a new GIF encoder, and has the speed parameter <code>speed</code>…\nSet the repeat behaviour of the encoded GIF\nTry to encode a collection of <code>ImageResult&lt;animation::Frame&gt;</code>…\nCreates a new decoder that decodes the input steam <code>r</code>, …\nAdapter to conform to <code>ImageDecoder</code> trait\nAn Radiance HDR decoder\nRadiance HDR encoder\nScanline buffered pixel by pixel iterator\nMetadata for Radiance HDR image\nWrapper struct around a <code>Cursor&lt;Vec&lt;u8&gt;&gt;</code>\nRefer to wikipedia\nRadiance HDR file signature\nColor components\nDivide color values by corresponding tuple member (r, g, …\nAll lines contained in image header are put here. Ordering …\nExponent\nEncodes the image <code>data</code> that has dimensions <code>width</code> and <code>height</code>\nDivide color values by exposure to get to get physical …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHeight of decoded image. It depends on orientation too.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns file metadata. Refer to <code>HdrMetadata</code> for details.\nCreates encoder\nCreates adapter\nReads Radiance HDR image header from stream <code>r</code> if the …\nAllows reading old Radiance HDR images\nOrientation matrix. For standard orientation it is …\nPixel height divided by pixel width\nConsumes decoder and returns a vector of <code>Rgb&lt;f32&gt;</code> pixels.\nConsumes decoder and returns a vector of <code>Rgb&lt;u8&gt;</code> pixels. …\nConsumes decoder and returns a vector of RGBE8 pixels\nConsumes decoder and returns a vector of transformed pixels\nHelper function for reading raw 3-channel f32 images\nCreates <code>Rgbe8Pixel</code> from components\nConverts <code>Rgbe8Pixel</code> into <code>Rgb&lt;f32&gt;</code> linearly\nConverts <code>Rgbe8Pixel</code> into <code>Rgb&lt;T&gt;</code> with scale=1 and gamma=2.2\nConverts <code>Rgbe8Pixel</code> into <code>Rgb&lt;T&gt;</code> using provided scale and …\nConverts <code>Rgb&lt;f32&gt;</code> into <code>Rgbe8Pixel</code>\nWidth of decoded image. It could be either scanline length,\nReads Radiance HDR image header from stream <code>reader</code>, if the …\nAn ico decoder\nICO encoder\nAn ICO image entry\nConstruct a new <code>IcoFrame</code> by encoding <code>buf</code> as a PNG\nEncodes the image <code>image</code> that has dimensions <code>width</code> and …\nTakes some <code>IcoFrame</code>s and encodes them into an ICO.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new decoder that decodes from the stream <code>r</code>\nCreate a new encoder that writes its output to <code>w</code>.\nConstruct a new <code>IcoFrame</code> using a pre-encoded PNG or BMP\nWrite an ICO image with the specified width, height, and …\nPixels per centimeter\nPixels per inch (2.54 cm)\nJPEG decoder\nThe representation of a JPEG encoder\nRepresents the absence of a unit, the values indicate only …\nRepresents the pixel density of an image\nRepresents a unit in which the density of an image is …\nReturns a pixel density with a pixel aspect ratio of 1\nA couple of values for (Xdensity, Ydensity)\nCreates the most common pixel density type: the horizontal …\nEncodes the image stored in the raw byte buffer <code>image</code> that …\nEncodes the given image.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new decoder that decodes from the stream <code>r</code>\nCreate a new encoder that writes its output to <code>w</code>\nCreate a new encoder that writes its output to <code>w</code>, and has …\nConfigure the decoder to scale the image during decoding.\nSet the pixel density of the images the encoder will …\nThe unit in which the density is measured\nAn OpenEXR decoder. Immediately reads the meta data from …\nA thin wrapper that implements <code>ImageEncoder</code> for OpenEXR …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUse <code>read_image</code> instead if possible, as this method creates …\nCreate a decoder. Consumes the first few bytes of the …\nCreate an <code>ImageEncoder</code>. Does not write anything yet. …\nCreate a decoder. Consumes the first few bytes of the …\nWrites the complete image.\nUses a heuristic to select one of the preceding filters …\nAn <code>AnimationDecoder</code> adapter of <code>PngDecoder</code>.\nFilters based on the average of left and right neighbor …\nHigh compression level\nCompression level of a PNG encoder. The default setting is …\nDefault compression level\nFast, minimal compression\nFilter algorithms used to process image data to improve …\nHuffman coding compression\nNo processing done, best used for low bit depth grayscale …\nAlgorithm that takes into account the left, upper left, …\nPNG decoder\nPNG encoder\nPng Reader\nRun-length encoding compression\nFilters based on previous pixel in the same scanline\nFilters based on the scanline above\nTurn this into an iterator over the animation frames.\nEncodes the image <code>data</code> that has dimensions <code>width</code> and <code>height</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the gamma value of the image or None if no gamma …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the image contains an animation.\nCreates a new decoder that decodes from the stream <code>r</code>\nCreate a new encoder that writes its output to <code>w</code>\nCreate a new encoder that writes its output to <code>w</code> with …\nCreates a new decoder that decodes from the stream <code>r</code> with …\nWrite a PNG image with the specified width, height, and …\nHeader produced by a <code>pam</code> file (“Portable Arbitrary Map”…\nMagic number P7\nStandardized tuple type specifiers in the header of a <code>pam</code>.\nSamples are encoded as decimal ascii strings separated by …\nSamples are unsigned binary integers in big endian\nMagic numbers P1 and P4\nHeader produced by a <code>pbm</code> file (“Portable Bit Map”)\nPixels are either black (0) or white (1)\nPixels are either black (0) or white (1) and a second …\nAn image format which is not standardized\nMagic numbers P2 and P5\nHeader produced by a <code>pgm</code> file (“Portable Gray Map”)\nPixels represent the amount of white\nGrayscale with an additional alpha channel\nMagic numbers P3 and P6\nHeader produced by a <code>ppm</code> file (“Portable Pixel Map”)\nPNM decoder\nEncodes images to any of the <code>pnm</code> image formats.\nStores the complete header data of a file.\nDenotes the category of the magic number\nThree channels: Red, Green, Blue\nFour channels: Red, Green, Blue, Alpha\nThe kind of encoding used to store sample values\nRetrieve the underlying arbitrary header if any\nRetrieve the underlying bitmap header if any\nRetrieve the underlying graymap header if any\nRetrieve the underlying pixmap header if any\nNumber of color channels\nEncode an image whose samples are represented as <code>u8</code>.\nBinary or Ascii encoded file\nBinary or Ascii encoded file\nBinary or Ascii encoded file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe height of the image this header is for.\nHeight of the image file\nHeight of the image file\nHeight of the image file\nHeight of the image file\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the reader and header after an image has been read.\nGet the two magic constant bytes corresponding to this …\nThe biggest value a sample can have. In other words, the …\nMaximum sample value within the image\nMaximum sample value within the image\nMaximum sample value within the image\nCreate a new decoder that decodes from the stream <code>read</code>\nCreate new PnmEncoder from the <code>writer</code>.\nWhether samples are stored as binary or as decimal ascii\nGet the pnm subtype, depending on the magic constant …\nRetrieve the format subtype from which the header was …\nColor interpretation of image pixels\nThe width of the image this header is for.\nWidth of the image file\nWidth of the image file\nWidth of the image file\nWidth of the image file\nCreate the header dynamically for each image.\nEnforce the use of a chosen header.\nEncode a specific pnm subtype image.\nWrite the header back into a binary stream\nQOI decoder\nQOI encoder\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new decoder that decodes from the stream <code>reader</code>\nCreates a new encoder that writes its output to <code>writer</code>\nThe representation of a TGA decoder\nTGA encoder.\nDisables run-length encoding\nEncodes the image <code>buf</code> that has dimensions <code>width</code> and <code>height</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new decoder that decodes from the stream <code>r</code>\nCreate a new encoder that writes its output to <code>w</code>.\nDecoder for TIFF images.\nEncoder for tiff images\nWrapper struct around a <code>Cursor&lt;Vec&lt;u8&gt;&gt;</code>\nEncodes the image <code>image</code> that has dimensions <code>width</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new TiffDecoder.\nCreate a new encoder that writes its output to <code>w</code>\nDefault lossy quality (80), providing a balance of quality …\nMaximum lossy quality value (100).\nMinimum lossy quality value (0).\nWebP Image format decoder. Currently only supports lossy …\nWebP Encoder.\nWebP encoder quality.\nEncode image data with the indicated color type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if the image as described by the bitstream is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLossless encoding.\nLossy encoding. 0 = low quality, small size; 100 = high …\nCreate a new WebPDecoder from the Reader <code>r</code>. This function …\nCreate a new encoder that writes its output to <code>w</code>.\nSets the background color if the image is an extended and …\nAn implementation of the VP8 Video Codec\nA Representation of the last decoded video frame\nVP8 Decoder\nDecodes the current frame\nIndicates whether this frame is intended for display\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the buffer size\nThe height of the luma plane\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether this frame is a keyframe\nCreate a new decoder. The reader must present a raw vp8 …\nThe pixel type of the frame as defined by Section 9.2 of …\nThe blue plane of the frame\nThe red plane of the frame\nThe width of the luma plane\nThe luma plane of the frame\nThe required color type can not be handled.\nAn error was encountered while decoding.\nAn error was encountered while decoding an image.\nThe resulting image exceed dimension limits in either …\nThe dimensions passed are wrong.\nAn error was encountered while encoding.\nAn error was encountered while encoding an image.\nContains the error value\nThe format is known exactly.\nRepeated an operation for which error that could not be …\nAn image format is not supported.\nA string describing the parameter. This is discouraged and …\nSome feature specified by string. This is discouraged and …\nThe generic error type for image operations.\nA best effort representation for image formats.\nResult of an image decoding/encoding process\nThe operation would have performed an allocation larger …\nAn error occurred while interacting with the environment.\nCompleting the operation would have required more …\nIndicates the limit that prevented an operation from …\nCompleting the operation would have required more …\nThe format can be identified by a name.\nThe end of the image has been reached.\nContains the success value\nAn error was encountered in input arguments.\nAn error was encountered in inputs arguments.\nDetails how a parameter is malformed.\nA common path extension for the format is known.\nThe format is not known or could not be determined.\nAn operation can not be completed by the chosen …\nThe specified strict limits are not supported for this …\nThe implementation for an operation was not provided.\nDetails what feature is not supported.\nReturns the image format associated with this error.\nReturn the image format associated with this error.\nReturns the image format associated with this error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>UnsupportedError</code> for an image with details on …\nCreate an <code>EncodingError</code> for an image format.\nCreate a <code>DecodingError</code> for an image format.\nConstruct a <code>ParameterError</code> directly from a corresponding …\nConstruct a generic <code>LimitError</code> directly from a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the corresponding <code>UnsupportedErrorKind</code> of the …\nReturns the corresponding <code>ParameterErrorKind</code> of the error.\nReturns the corresponding <code>LimitErrorKind</code> of the error.\nCreate an <code>EncodingError</code> that stems from an arbitrary error …\nCreate a <code>DecodingError</code> that stems from an arbitrary error …\nThe given limits\nThe supported strict limits\nThe color format did not match the channel count.\nThe samples are in column-major form and all samples are …\nDenotes invalid flat sample buffers when trying to convert …\nA flat buffer over a (multi channel) image.\nAll samples are packed.\nDifferent normal forms of buffers.\nThe represented image can not use this representation.\nAt least pixels are packed.\nThe samples are in row-major form and all samples are …\nA ffi compatible description of a sample buffer.\nThe represented image was too large.\nNo pixel aliases another.\nA flat buffer that can be used as an image view.\nA mutable owning version of a flat buffer.\nDeprecated - ChannelCountMismatch is used instead\nTuple of bounds in the order of coordinate inputs.\nAdd this to an index to get to the sample in the next …\nThe number of channels in the color representation of the …\nSupplementary color information.\nDescribe a column-major image packed in all directions.\nGet the dimensions <code>(channels, width, height)</code>.\nCheck if a buffer of length <code>len</code> is large enough.\nGet a reference on the inner sample descriptor.\nGet a reference on the sample buffer descriptor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to a selected subpixel if it is …\nGet a mutable reference to a selected sample.\nGet a reference to a selected subpixel if it is in-bounds.\nGet a reference to a selected subpixel.\nIf there are any samples aliasing each other.\nThe height of the represented image.\nAdd this to an index to get to the next sample in …\nReturn the mutable portion of the buffer that holds sample …\nReturn the mutable buffer that holds sample values.\nReturn the portion of the buffer that holds sample values.\nReturn the portion of the buffer that holds sample values.\nCheck that the pixel and the channel index are in bounds.\nGet an index provided it is inbouds.\nResolve the index of a particular sample.\nGet the theoretical position of sample (channel, x, y).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake out the sample buffer.\nTake out the sample buffer.\nCheck if a buffer fulfills the requirements of a normal …\nA <code>repr(C)</code> description of the layout of buffer samples.\nGet the minimum length of a buffer such that all in-bounds …\nGet the minimum length of a buffer such that all in-bounds …\nGet the minimum length of a buffer such that all in-bounds …\nCompares the logical preconditions.\nDescribe a row-major image packed in all directions.\nGet a reference on the inner buffer.\nGet a reference on the inner buffer.\nUnderlying linear container holding sample values.\nShrink the image to the minimum of current and given …\nShrink the inner image.\nShrink the inner image.\nGet the strides for indexing matrix-like <code>[(c, w, h)]</code>.\nTry to convert this into an image with mutable pixels.\nThe width of the represented image.\nAdd this to an index to get to the next sample in …\nA bi-level color map\nCubic Filter\nThe color type on which the map operates on\nA color map\nAvailable Sampling Filters.\nGaussian Filter\nLanczos with window 3\nNearest Neighbor\nLinear Filter\nPerforms a Gaussian blur on the supplied image. <code>sigma</code> is a …\nBrighten the supplied image. <code>value</code> is the amount to …\nFunctions for altering and converting the color of …\nAdjust the contrast of the supplied image. <code>contrast</code> is the …\nReturn a mutable view into an image The coordinates set …\nReturn an immutable view into an image The coordinates set …\nReduces the colors of the image using the supplied …\nPerform a 3x3 box filter on the supplied image. <code>kernel</code> is …\nFlip an image horizontally\nFlip an image horizontally and put the result into the …\nFlip an image horizontally in place.\nFlip an image vertically\nFlip an image vertically and put the result into the …\nFlip an image vertically in place.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to a grayscale image with the …\nConvert the supplied image to a grayscale image with the …\nDetermine if this implementation of ColorMap overrides the …\nIndicate NeuQuant implements <code>lookup</code>.\nFill the image with a linear horizontal gradient\nHue rotate the supplied image. <code>value</code> is the degrees to …\nReduces the colors using the supplied <code>color_map</code> and …\nReturns the index of the closest match of <code>color</code> in the …\nLinearly sample from an image using coordinates in [0, w-1]…\nSample from an image using coordinates in [0, w-1] and [0, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvert each pixel within the supplied image. This function …\nLooks up color by index in the color map.  If <code>idx</code> is out …\nMaps <code>color</code> to the closest color in the color map.\nOverlay an image at a given coordinate (x, y)\nCalculate the region that can be copied from top to bottom.\nReplace the contents of an image at a given coordinate (x, …\nResize the supplied image to the specified dimensions. …\nRotate an image 180 degrees clockwise.\nRotate an image 180 degrees clockwise and put the result …\nRotate an image 180 degrees clockwise in place.\nRotate an image 270 degrees clockwise.\nRotate an image 270 degrees clockwise and put the result …\nRotate an image 90 degrees clockwise.\nRotate an image 90 degrees clockwise and put the result …\nLinearly sample from an image using coordinates in [0, 1].\nSample from an image using coordinates in [0, 1], taking …\nResize the supplied image to the specific dimensions.\nTile an image by repeating it multiple times\nPerforms an unsharpen mask on the supplied image. <code>sigma</code> is …\nFill the image with a linear vertical gradient\nA bi-level color map\nThe color type on which the map operates on\nA color map\nBrighten the supplied image. <code>value</code> is the amount to …\nBrighten the supplied image in place. <code>value</code> is the amount …\nAdjust the contrast of the supplied image. <code>contrast</code> is the …\nAdjust the contrast of the supplied image in place. …\nReduces the colors of the image using the supplied …\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to a grayscale image with the …\nConvert the supplied image to a grayscale image with the …\nDetermine if this implementation of ColorMap overrides the …\nHue rotate the supplied image. <code>value</code> is the degrees to …\nHue rotate the supplied image in place. <code>value</code> is the …\nReduces the colors using the supplied <code>color_map</code> and …\nReturns the index of the closest match of <code>color</code> in the …\nInvert each pixel within the supplied image. This function …\nLooks up color by index in the color map.  If <code>idx</code> is out …\nMaps <code>color</code> to the closest color in the color map.\nSet of supported strict limits for a decoder.\nResource limits for decoding.\nA multi-format image reader.\nThis function checks the <code>max_image_width</code> and …\nThis function checks that all currently set strict limits …\nRemove the current information on the image format.\nRead the image (replaces <code>load</code>).\nGet the currently determined format.\nThis function increases the <code>max_alloc</code> limit with amount. …\nThis function acts identically to [<code>free</code>], but takes a <code>usize</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead the image dimensions.\nUnwrap the reader.\nSet a custom set of decoding limits.\nThe maximum allowed sum of allocations allocated by the …\nThe maximum allowed image height. This limit is strict. …\nThe maximum allowed image width. This limit is strict. The …\nCreate a new image reader without a preset format.\nDisable all decoding limits.\nDisable all limits.\nOpen a file to read, format will be guessed from path.\nThis function checks that the current limit allows for …\nThis function acts identically to [<code>reserve</code>], but accepts …\nThis function acts identically to [<code>reserve</code>], but takes a …\nSupply the format as which to interpret the read image.\nConstruct a reader with specified format.\nMake a format guess based on the content, replacing it on …\nA Rectangle defined by its top left corner, width and …\nReturns the argument unchanged.\nThe rectangle’s height.\nCalls <code>U::from(self)</code>.\nThe rectangle’s width.\nThe x coordinate of the top left corner.\nThe y coordinate of the top left corner.\nA layer of graphical primitives.\nA stack of layers used for drawing.\nReturns the slice of layers in the <code>Stack</code>.\nClears the layers of the <code>Stack</code>, allowing reuse.\nReturns a mutable reference to the current <code>Layer</code> of the …\nFlushes and settles any pending group of primitives in the …\nFlushes and settles any primitives in the current layer of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns an iterator over immutable references to the …\nReturns an iterator over mutable references to the layers …\nCreates a new empty <code>Stack</code>.\nPops the current clipping region from the <code>Stack</code> and …\nPops the current <code>Transformation</code> in the <code>Stack</code>.\nPushes a new clipping region in the <code>Stack</code>; creating a new …\nPushes a new <code>Transformation</code> in the <code>Stack</code>.\nClears all the layers contents and resets its bounds.\nResizes the <code>Layer</code> to the given bounds.\nReturns the current <code>Transformation</code> of the <code>Stack</code>.\nCreates a new <code>Layer</code> with the given bounds.\nThe result of counting the attributes of a set of meshes.\nA mesh with a gradient.\nA vertex which contains 2D position &amp; packed gradient data.\nA set of vertices and indices representing a list of …\nA low-level primitive to render a mesh of triangles.\nA renderer capable of drawing a <code>Mesh</code>.\nA mesh with a solid color.\nA two-dimensional vertex with a color.\nReturns the number of total vertices &amp; total indices of …\nThe color of the vertex in <strong>linear</strong> RGBA.\nDraws the given <code>Mesh</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe packed vertex data of the gradient.\nThe total amount of gradient vertices.\nThe total amount of gradient meshes.\nThe list of vertex indices that defines the triangles of …\nThe total amount of indices.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe vertex position in 2D space.\nThe vertex position in 2D space.\nThe total amount of solid vertices.\nThe total amount of solid meshes.\nThe vertices of the mesh\nThe vertices and indices of the mesh.\nThe vertices and indices of the mesh.\nThe clip bounds of the <code>Mesh</code>.\nThe clip bounds of the <code>Mesh</code>.\nThe <code>Transformation</code> for the vertices of the <code>Mesh</code>.\nThe <code>Transformation</code> for the vertices of the <code>Mesh</code>.\nA store of recently used sections of text.\nSome cached text.\nA multi-line text editor.\nAn editor.\nA set of system fonts.\nA bunch of text.\nA paragraph.\nA weak reference to a [<code>cosmic-text::Buffer</code>] that can be …\nSome raw text.\nA text primitive.\nA version number.\nAllocates a text <code>Entry</code> if it is not already present in the …\nReturns the buffer of the <code>Editor</code>.\nReturns the buffer of the <code>Paragraph</code>.\nA weak reference to a <code>cosmic_text::Buffer</code>.\nCache text.\nThe clip bounds of the text.\nThe color of the text.\nCreates a <code>Weak</code> reference to the <code>Editor</code>.\nCreates a <code>Weak</code> reference to the <code>Paragraph</code>.\nDraw and edit text.\nReturns the global <code>FontSystem</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the text <code>Entry</code> with the given <code>KeyHash</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads a font from its bytes.\nMeasures the dimensions of the given <code>cosmic_text::Buffer</code>.\nCreates a new empty <code>Cache</code>.\nCreates a new empty <code>Editor</code>.\nCreates a new empty <code>Paragraph</code>.\nDraw paragraphs.\nThe position of the text.\nReturns the raw <code>cosmic_text::FontSystem</code>.\nReturns the attributes of the given <code>Font</code>.\nConverts some <code>Color</code> to a <code>cosmic_text::Color</code>.\nConverts some <code>Shaping</code> strategy to a <code>cosmic_text::Shaping</code> …\nConverts some <code>Wrapping</code> strategy to a <code>cosmic_text::Wrap</code> …\nTrims the <code>Cache</code>.\nReturns the current <code>Version</code> of the <code>FontSystem</code>.\nThe bounds of the text.\nThe clip bounds of the text.\nThe color of the text.\nThe contents of the text.\nThe font of the text.\nThe horizontal alignment of the text.\nThe line height of the text.\nThe shaping strategy of the text.\nThe size of the text in logical pixels.\nThe vertical alignment of the text.\nA store of recently used sections of text.\nA cache entry.\nA cache key representing a section of text.\nThe hash of a <code>Key</code>.\nThe bounds of the text.\nThe buffer of text, ready for drawing.\nThe content of the text.\nThe <code>Font</code> of the text.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe line height of the text.\nThe minimum bounds of the text.\nThe shaping strategy of the text.\nThe size of the text.\nAn action to perform on an <code>Editor</code>\nAdvanced text shaping and font fallback.\nWhether to associate cursors placed at a boundary between …\nAlign or justify\nRepresents an angle in degrees or radians.\nText attributes\nList of text attributes to apply to a line\nAn owned version of <code>Attrs</code>\nDelete text behind cursor\nBasic shaping with no font fallback.\nAn iterator over the paragraphs in the input text. It is …\nA value borrowed together with an <code>FontSystem</code>\nA buffer of text that is shaped and laid out\nMove cursor to the end of the document\nA line (or paragraph) of text that is shaped and laid out\nMove cursor to the start of the document\nKey for building a glyph cache\nFlags that change rendering\nMetrics, but implementing Eq and Hash using u32 …\nHelper for caching a value when the value is optionally …\nA set of change items grouped into one logical change\nA unique change to an editor\nMouse click at specified position\nCloses a subpath, connecting the final point to the …\nText color\n32-bit RGBA bitmap.\nPath command.\nUse <code>\\r</code> for line ending (many legacy systems)\nUse <code>\\r\\n</code> for line ending (Windows-style)\nGlyphs in cursive fonts generally use a more informal …\nCurrent cursor location\nA cubic bezier curve from the previous point to the final …\nDelete text in front of cursor\nMouse double click at specified position\nMove cursor down\nMouse drag to specified position\nA trait to allow easy replacements of <code>Editor</code>, like …\nA wrapper of [<code>Buffer</code>] for easy editing\nMove cursor to end of line\nCreate new line\nEscape, clears selection\nSkew by 14 degrees to synthesize italic\nA font family.\nAn owned version of <code>Family</code>\nFantasy fonts are primarily decorative or expressive fonts …\nA font\nFont-specific part of <code>Attrs</code> to be used for matching\nAccess to the system fonts.\nWraps at a glyph level\nMove cursor to specific line\nMove cursor to start of line\nIdentity matrix.\nInsert character at cursor\nA form that is generally cursive in nature.\nThe position of a cursor within a [<code>Buffer</code>].\nApply specific <code>LayoutCursor</code>\nA laid out glyph\nA line of laid out glyphs\nA line of visible text for rendering\nAn iterator of visible text lines, see <code>LayoutRun</code>\nMove cursor left\nMove cursor to next word boundary to the left\nUse <code>\\n</code> for line ending (POSIX-style)\nUse <code>\\n\\r</code> for line ending (some legacy systems)\nSelect by lines\nLine ending\nIterator over lines terminated by <code>LineEnding</code>\nA straight line from the previous point to the specified …\n8-bit alpha mask.\nMetrics of text\nThe sole criterion of a monospace font is that all glyphs …\nA motion to perform on a <code>Cursor</code>\nMove the cursor with some motion\nBegins a new subpath at the specified point.\nThe name of a font family of choice.\nMove cursor to next character (Self::Right in LTR, …\nMove cursor to next word boundary\nNo selection\nNo wrapping\nNo line ending\nA face that is neither italic not obliqued.\nNormal selection\nA typically-sloped version of the regular face.\nMove cursor down one page\nMove cursor up one page\nMove cursor to end of paragraph\nMove cursor to start of paragraph\nDescribes the offset and dimensions of a rendered mask.\nMove cursor to previous character (Self::Left in LTR, …\nMove cursor to previous word boundary\nA quadratic curve from the previous point to the final …\nMove cursor right\nMove cursor to next word boundary to the right\nGlyphs in sans-serif fonts, as the term is used in CSS, …\nScroll position in [<code>Buffer</code>]\nScroll specified number of lines\nSelection mode\nSerif fonts represent the formal text style for a script.\nA set of buffers containing allocations for shaped text.\nA shaped glyph\nA shaped line (or paragraph)\nA helper structure for caching shape runs.\nKey for caching shape runs.\nA shaped span (for bidirectional processing)\nA shaped word (for word wrapping)\nThe shaping strategy of some text.\nMove cursor to start of line, skipping whitespace\nA face width.\nAllows italic or oblique faces to be selected.\nBinning of subpixel position for cache optimization\n32-bit RGBA subpixel mask.\nCache for rasterizing with the swash scaler\nContent of a scaled glyph image.\nScaled glyph image.\nTwo dimensional transformation matrix.\nMouse triple click at specified position\nMove cursor up\nMove cursor up or down by a number of pixels\nSpecifies the weight of glyphs in the font, their degree …\nSelect by words\nWraps at the word level\nWraps at the word level, or fallback to glyph level if a …\nWrapping mode\nAngle of zero degrees.\nGet the alpha component\nPerform an Action on the editor\nPerform an Action on the editor\nAdd an attribute span, removes any previous matching parts …\nWhether to associate the cursor with the run before it or …\nGet the Text alignment\nGet a flags value with all known bits set.\nAppend line at end of this line\nApply a change\nGet an array over all of the components, in <code>[r, g, b, a]</code> …\nGet a tuple over all of the attributes, in <code>(r, g, b, a)</code> …\nGet the line ending as a str\nGet attributes list\nGet the current automatic indentation setting\nGet the blue component\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nMutably borrows <code>self</code> together with an <code>FontSystem</code> for more …\nMutably borrows the buffer together with an <code>FontSystem</code> for …\nGet the internal <code>BufferRef</code>\nGet the internal <code>BufferRef</code>\nSee <code>Self::new</code>.\nSee <code>Self::new</code>.\nSee <code>Self::new</code>.\nConcurrently cache fonts by id list\nCache key, see CacheKey\nSet <code>CacheKeyFlags</code>\n<code>CacheKeyFlags</code>\nResets the image to a default state.\nClear the current attribute spans\nSet Color\nOptional color override\nCheck if this set of attributes can be shaped with another\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nGiven an origin, offset and bounding box, computes the …\nWhether all set bits in a source flags value are also set …\nContent of the image.\nCopy selection\nGet the current cursor\nApply a <code>Motion</code> to a <code>Cursor</code>\nApply a <code>Motion</code> to a <code>Cursor</code>\nGet X and Y position of the top left corner of the cursor\nRaw image data.\nGet the database.\nGet a mutable reference to the database.\nGet the default Attrs\nDelete text starting at start Cursor and ending at end …\nDelete selection, adjusting cursor and returning true if …\nReturns the determinant of the transform.\nThe intersection of a source flags value with the …\nDraw the buffer\nDraw the editor\nDraw the buffer\nGet a flags value with all bits unset.\nCursor indicating end of change\nEnd index of cluster in original line\nGet line ending\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nSet Family\nGet completed change\n<code>CacheKeyFlags</code>\nFont ID\nFont id of the glyph\nFont size in pixels\nFont size of the glyph\n<code>f32</code> bits of font size\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreates a new angle from degrees.\nCreates a new angle from gradians.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates a new angle from radians.\nCreates a new angle from turns.\nGet the green component\nGets the value if in state <code>Self::Used</code>.\nGet cache item, updating age if found\nGet a font by its ID.\nCreate a swash Image from a cache key, caching results\nCreate a swash Image from a cache key, without caching …\nGets the value mutably if in state <code>Self::Used</code>.\nCreates outline commands\nCreates outline commands, without caching results\nGet the attribute span for an index\nIndex of [<code>LayoutGlyph</code>] in [<code>LayoutLine::glyphs</code>]\nGlyph ID\nFont id of the glyph\nThe array of layout glyphs to draw\nGlyphs in line\nHeight in pixels.\nReturn the pixel span <code>Some((x_left, x_width))</code> of the …\nConvert x, y position to Cursor (hit detection)\nThe horizontal position of scroll in fractional pixels\nFirst-byte-index of glyph at cursor (will insert behind …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInsert cache item with current age\nInsert if true, delete if false\nInsert text at specified cursor with specified attrs_list\nInsert a string at the current cursor or replacing the …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume this <code>FontSystem</code> and return the locale and database.\nConsume this line, returning only its text contents as a …\nReturns the inverse of the transform, if any.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nChecks if the value is empty or unused.\nChecks if the value is used (i.e. cached for access).\nChange items grouped into one change\nYield a set of contained flags values.\nYield a set of contained named flags values.\nLayout line, will cache results\nIndex of [<code>LayoutLine</code>] in [<code>BufferLine::layout</code>]\nConvert a <code>Cursor</code> to a <code>LayoutCursor</code>\nGet line layout cache\nGet the visible layout runs for rendering and other tasks\nHorizontal offset with respect to the origin specified …\nUnicode BiDi embedding level, character is left-to-right …\nIndex of [<code>BufferLine</code>] in [<code>Buffer::lines</code>]\nIndex of [<code>BufferLine</code>] in [<code>Buffer::lines</code>]\nIndex of [<code>BufferLine</code>] in [<code>Buffer::lines</code>]. This will be …\nY offset to next line\nLine height in pixels\nLine height of the glyph, will override buffer setting\nMaximum line height of any spans in line\nThe index of the original text line\nLay out the provided line index and return the result\nLay out the provided line index and return the result\nShape the provided line index and return the result\nShape the provided line index and return the result\nY offset to top of line\nWidth of line\nY offset to baseline of line\nBufferLines (or paragraphs) of text in the buffer\nGet the locale.\nCheck if font matches\nMaximum ascent of the glyphs in line\nMaximum descent of the glyphs in line\nSet metadata\nGet line metadata. This will be None if …\nMetadata from <code>Attrs</code>\nSet <code>Metrics</code>, overriding values in buffer\nGet the current <code>Metrics</code>\nGet the current <code>monospace_width</code>\nCreate a new <code>FontSystem</code>, that allows access to any …\nCreate a new swash cache\nCreate a new set of attributes with sane defaults\nCreate a new attributes list with a set of default Attrs\nCreate an iterator to split the input text into paragraphs …\nCreates a new transform.\nCreate metrics with given font size and line height\nCreate a new <code>Buffer</code> with the provided <code>FontSystem</code> and …\nCreate a new line with the given text and attributes list …\nCreate a new cursor\nCreate a new <code>LayoutCursor</code>\nCreate a new scroll\nCreate a new <code>Editor</code> with the provided [<code>Buffer</code>]\nCreate an iterator of lines in a string slice\nShape a word into a set of glyphs.\nShape a span into a set of words.\nShape a line into a set of spans, using a scratch buffer. …\nCreates a new empty scaled image.\nCreate an empty <code>Buffer</code> with the provided <code>Metrics</code>. This is …\nCreate a new cursor, specifying the affinity\nCreate a new <code>FontSystem</code> with a pre-specified set of fonts.\nCreate a new <code>FontSystem</code> with a pre-specified locale and …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nOffset and size of the image.\nReturns a new transform that represents a rotation …\nReturns a new transform that represents a scale followed …\nReturns a new transform that represents a translation …\nGet the red component\nGet the <code>Buffer</code> redraw flag\nTrue if a redraw is needed\nCreate metrics with given font size and calculate line …\nThe intersection of a source flags value with the …\nReset shaping, layout, and metadata caches\nReset only layout cache\nResets the current line with new internal values.\nReset shaping and layout caches\nCreate new color with red, green, and blue components\nCreate new color with red, green, blue, and alpha …\nCreates a rotation transform.\nCreates a rotation transform around a point.\nTrue if the original paragraph direction is RTL\nCreates a scale transform.\nScale font size and line height\nGet the current scroll location\nGet the current selection position\nGet the bounds of the current selection\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the text alignment\nSet attributes list\nEnable or disable automatic indentation\nSet the current cursor\nSet line ending\nSet line metadata. This is stored until the next line reset\nSet the current <code>Metrics</code>\nSet the current <code>Metrics</code>\nSet the current <code>Metrics</code> and buffer dimensions at the same …\nSet the current <code>Metrics</code> and buffer dimensions at the same …\nSet monospace width monospace glyphs should be resized to …\nSet the <code>Buffer</code> redraw flag\nSet redraw needed flag\nSet text of buffer, using an iterator of styled spans …\nSet text of buffer, using an iterator of styled spans …\nSet the current scroll location\nSet the current selection position\nSet the current buffer dimensions\nSet the current buffer dimensions\nSet the current tab width. A <code>tab_width</code> of 0 is not …\nSet tab width (number of spaces between tab stops)\nSet the current tab width. A <code>tab_width</code> of 0 is not …\nSet tab width (number of spaces between tab stops)\nSet text of buffer, using provided attributes for each …\nSet text and attributes list\nSet text of buffer, using provided attributes for each …\nMoves the value from <code>Self::Used</code> to <code>Self::Unused</code>.\nSets the value to <code>Self::Used</code>.\nSet the current <code>Wrap</code>\nSet the current <code>Wrap</code>\nShape line, will cache results\nShape lines until scroll, after adjusting scroll if the …\nShape lines until scroll, after adjusting scroll if the …\nGet line shaping cache\nShape lines until cursor, also scrolling to include cursor …\nShape lines until cursor, also scrolling to include cursor …\nShape lines until scroll\nShape lines until scroll\nGet the current buffer dimensions (width, height)\nCreates a skew transform.\nSource of the image.\nGet the current attribute spans\nGet an iterator over the current attribute spans\nSplit attributes list at an offset\nSplit off new line at index\nCursor indicating start of change\nStart index of cluster in original line\nStart collecting change\nSet Stretch\nSet Style\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGet the current tab width\nGet the current <code>tab_width</code>\nTakes the buffered value if in state <code>Self::Unused</code>.\nTakes the cached value if in state <code>Self::Used</code>.\nGet current text\nThe original text line\nText to be inserted or deleted\nReturns a new transform that represents the application of …\nReturns a new transform that represents this transform …\nReturns a new transform that represents this transform …\nReturns a new transform that represents this transform …\nReturns the angle in degrees.\nReturns the angle in radians.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nVertical offset with respect to the origin specified when …\nReturns the result of a transformation matrix applied to …\nReturns the result of applying this transform to a point.\nReturns the result of applying this transform to a vector.\nCreates a translation transform.\nRemove anything in the cache with an age older than …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the associated verb for the command.\nPixel offset from the start of the [<code>BufferLine</code>]. This will …\nWidth of hitbox\nWidth of the line\nSet Weight\nGet the width of the <code>ShapeGlyph</code> in pixels, either using …\nGet the width of the <code>ShapeWord</code> in pixels, using the …\nWidth in pixels.\nGet the internal <code>Buffer</code>\nGet the internal <code>Buffer</code>, mutably\nGet the internal <code>Buffer</code>, mutably\nEnumerate pixels in an Image, use <code>with_image</code> for better …\nGet the current <code>Wrap</code>\nX offset of hitbox\nInteger component of X offset in line\nBinning of fractional X offset\nX offset in line\nY offset of hitbox\nInteger component of Y offset in line\nBinning of fractional Y offset\nY offset in line\nBlack weight (900), the thickest value.\nBold weight (700).\nA font’s raw data, typically backed by a Vec.\nGlyphs in cursive fonts generally use a more informal …\nA font database.\nExtra-bold weight (800).\nExtra light weight (200).\nA single font face info.\nA font family.\nFantasy fonts are primarily decorative or expressive fonts …\nA font’s path.\nA unique per database face ID.\nA form that is generally cursive in nature.\nLight weight (300).\nA <code>Name</code> language.\nMedium weight (500, higher than normal).\nThe sole criterion of a monospace font is that all glyphs …\nNormal (400).\nThe name of a font family of choice.\nA face that is neither italic not obliqued.\nA typically-sloped version of the regular face.\nA database query.\nSemibold weight (600).\nGlyphs in sans-serif fonts, as the term is used in CSS, …\nSerif fonts represent the formal text style for a script.\nA font’s raw data originating from a shared file mapping.\nA font source.\nA face width.\nAllows italic or oblique faces to be selected.\nThin weight (100), the thinnest value.\nSpecifies the weight of glyphs in the font, their degree …\nCreates a dummy ID.\nSelects a <code>FaceInfo</code> by <code>id</code>.\nReturns font face storage and the face index by <code>ID</code>.\nReturns an iterator over the internal storage.\nA list of family names.\nA prioritized list of font family names or generic family …\nReturns the generic family name or the <code>Family::Name</code> itself.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn unique ID.\nA face index in the <code>source</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>Database</code> contains no font faces.\nReturns the number of font faces in the <code>Database</code>.\nLoads a font data into the <code>Database</code>.\nLoads a font file into the <code>Database</code>.\nLoads a font from the given source into the <code>Database</code> and …\nLoads font files from the selected directory into the …\nAttempts to load system fonts.\nTransfers ownership of shared font data back to the font …\nMakes the font data that backs the specified face id …\nIndicates that the font face is monospaced.\nCreate a new, empty <code>Database</code>.\nA PostScript name.\nReturns the primary language.\nPushes a user-provided <code>FaceInfo</code> to the database.\nPerforms a CSS-like query and returns the best matched …\nReturns a language region.\nRemoves a font face by <code>id</code> from the database.\nSets the family that will be used by <code>Family::Cursive</code>.\nSets the family that will be used by <code>Family::Fantasy</code>.\nSets the family that will be used by <code>Family::Monospace</code>.\nSets the family that will be used by <code>Family::SansSerif</code>.\nSets the family that will be used by <code>Family::Serif</code>.\nA font source.\nA font face stretch.\nSelects a normal, condensed, or expanded face from a font …\nA font face style.\nAllows italic or oblique faces to be selected.\nReturns a numeric representation of a width.\nA font face weight.\nSpecifies the weight of glyphs in the font, their degree …\nExecutes a closure with a font’s data.\nIndicates that special handling of the beginning of text …\nText is set vertically from bottom to top.\nA cluster level.\nFlags for buffers.\nIndicates that a dotted circle should not be inserted in …\nDefines the direction in which text is to be read.\nIndicates that special handling of the end of text …\nA font face handle.\nA feature tag with an accompanying range specifying on …\nSerialize glyph extents.\nSerialize glyph flags.\nA buffer that contains the results of the shaping process.\nA glyph info.\nHolds the positions of the glyph in both horizontal and …\nInitial, unset direction.\nA script language.\nText is set horizontally from left to right.\nDo not serialize glyph advances, glyph offsets will …\nDo not serialize glyph cluster.\nDo no serialize glyph name.\nDo not serialize glyph position information.\nIndicates that characters with <code>Default_Ignorable</code> Unicode …\nIndicates that the <code>UNSAFE_TO_CONCAT</code> glyph-flag should be …\nIndicates that characters with <code>Default_Ignorable</code> Unicode …\nText is set horizontally from right to left.\nA text script.\nFlags used for serialization with a <code>BufferSerializer</code>.\nA reusable plan for shaping a text buffer.\nText is set vertically from top to bottom.\nA buffer that contains an input string ready for shaping.\nIndicates that the shape() call and its variants should …\nA font variation.\nAppends a character to a buffer with the given cluster …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nReturns the language as a string.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nClear the contents of the buffer.\nClears the content of the glyph buffer and returns an empty\nAn index to the start of the grapheme cluster in the …\nRetrieve the cluster level of the buffer.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns the <code>Buffer</code>’s text direction.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet the flags for this buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nCreates a new [<code>Face</code>] from <code>ttf_parser::Face</code>.\nConverts an ISO 15924 script tag to a corresponding <code>Script</code>.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates a new <code>Face</code> from data.\nParses a <code>Feature</code> form a string.\nA selected glyph.\nGet the glyph infos.\nGet the glyph positions.\nGuess the segment properties (direction, language, script) …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if the buffer contains no elements.\nReturns <code>true</code> if the buffer contains no elements.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nGet the buffer language.\nReturns the length of the data of the buffer.\nReturns the length of the data of the buffer.\nCreate a new <code>UnicodeBuffer</code>.\nReturns a plan that can be used for shaping any buffer …\nCreate a new <code>Feature</code> struct.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPushes a string to a buffer.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nResets clusters.\nPredefined scripts.\nGet the ISO15924 script tag.\nConverts the glyph buffer content into a string.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the cluster level of the buffer.\nSet the text direction of the <code>Buffer</code>’s contents.\nSet the flags for this buffer.\nSet the buffer language.\nSets pixels per EM.\nSets point size per EM.\nSets the post-context for this buffer.\nSets the pre-context for this buffer.\nSet the script from an ISO15924 tag.\nSets font variations.\nShapes the buffer content using provided font and features.\nShapes the buffer content using the provided font and plan.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns script’s tag.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns face’s units per EM.\nIndicates that if input text is broken at the beginning of …\nHow much the line advances after drawing this glyph when …\nHow much the glyph moves on the X-axis before drawing it, …\nHow much the line advances after drawing this glyph when …\nHow much the glyph moves on the Y-axis before drawing it, …\nA grayscale bitmap with 2 bits per pixel.\nA packed grayscale bitmap with 2 bits per pixel.\nA grayscale bitmap with 4 bits per pixel.\nA packed grayscale bitmap with 4 bits per pixel.\nA grayscale bitmap with 8 bits per pixel.\nA monochrome bitmap.\nA packed monochrome bitmap.\nA color bitmap with 32 bits per pixel.\nA list of errors that can occur during a CFF glyph …\nA font face.\nThe face index is larger than the number of faces in the …\nA list of font face parsing errors.\nParsed face tables.\nA 32-bit signed fixed-point number (16.16).\nA trait for parsing raw binary data of fixed size.\nA type-safe wrapper for glyph ID.\nA form that is generally cursive in nature.\nA <code>Name</code> language.\nA slice-like container that converts internal binary data …\nA slice-like container that converts internal binary data …\nAn iterator over <code>LazyArray16</code>.\nAn iterator over <code>LazyArray32</code>.\nA line metrics.\nAn attempt to read out of bounds detected.\nThe <code>head</code> table is missing or malformed.\nThe <code>hhea</code> table is missing or malformed.\nThe <code>maxp</code> table is missing or malformed.\nA face that is neither italic not obliqued.\nA variation coordinate in a normalized coordinate system.\nA typically-sloped version of the regular face.\nA trait for glyph outline construction.\nFace permissions.\nA platform ID.\nA glyph’s raster image.\nA glyph raster image format.\nA raw font face.\nA list of all supported tables as raw data.\nA rectangle.\nA rectangle described by the left-lower and upper-right …\nA RGBA color in the sRGB color space.\nObject’s raw data size.\nA script metrics used by subscript and superscript.\nA face style.\nA raw table record.\nA 4-byte tag.\nAn affine transform.\nUnicode Ranges.\nFace data must start with <code>0x00010000</code>, <code>0x74727565</code>, …\nA font variation value.\nA variation axis.\nA face weight.\nA face width.\nThe ‘a’ component of the transform.\nAn Anchor Point Table implementation.\nThis module contains Apple Advanced Typography Layout …\nReturns tag value as <code>u32</code> number.\nReturns a horizontal face ascender.\nAn Axis Variations Table implementation.\nAn axis tag name.\nThe ‘b’ component of the transform.\nPerforms a binary search by specified <code>key</code>.\nPerforms a binary search by specified <code>key</code>.\nPerforms a binary search using specified closure.\nPerforms a binary search using specified closure.\nThe ‘c’ component of the transform.\nReturns face’s capital height.\nA Color Bitmap Data Table implementation.\nA Color Bitmap Location Table implementation.\nA Compact Font Format Table implementation.\nA Compact Font Format 2 Table implementation.\nAppends a ClosePath segment.\nA Character to Glyph Index Mapping Table implementation.\nReturns the number of palettes stored in the <code>COLR</code>+<code>CPAL</code> …\nA Color Table implementation.\nCombines two transforms with each other.\nA Color Palette Table implementation.\nAppends a CurveTo segment.\nThe ‘d’ component of the transform.\nA raw image data. It’s up to the caller to decode it.\nThe input font file data.\nReturns a horizontal face descender.\nThe ‘e’ component of the transform.\nThe ‘f’ component of the transform.\nA Feature Name Table implementation.\nReturns the number of fonts stored in a TrueType font …\nAn image format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new coordinate.\nCreates a new coordinate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Tag</code> from bytes.\nCreates a <code>Tag</code> from bytes.\nCreates a new <code>Face</code> from provided <code>RawFaceTables</code>.\nCreates a new <code>RawFace</code> from a raw data.\nCreates a new <code>Face</code> from a raw data.\nA Font Variations Table implementation.\nA Glyph Definition Table implementation.\nReturns a value at <code>index</code>.\nReturns a value at <code>index</code>.\nReturns the coordinate value as f2.14.\nReturns a bounding box that large enough to enclose any …\nA Glyph Data Table implementation.\nReturns a tight glyph bounding box.\nReturns glyph’s horizontal advance.\nReturns glyph’s horizontal side bearing.\nResolves a Glyph ID for a code point.\nResolves a Glyph ID for a glyph name.\nReturns glyph’s name.\nReturns a reference to a glyph’s raster image.\nReturns a reference to a glyph’s SVG image.\nResolves a variation of a Glyph ID from two code points.\nReturns glyph’s vertical advance.\nReturns glyph’s vertical side bearing.\nReturns glyph’s vertical origin according to Vertical …\nA Glyph Positioning Table implementation.\nA Glyph Substitution Table implementation.\nA Glyph Variations Table implementation.\nChecks that face has non-default variation coordinates.\nA Font Header Table implementation.\nReturns rect’s height.\nReturns face’s height.\nImage height.\nA Horizontal Header Table implementation.\nA Horizontal/Vertical Metrics Table implementation.\nA Horizontal/Vertical Metrics Variations Table …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that face is marked as <em>Bold</em>.\nReturns <code>true</code> if the glyph can be colored/painted using the …\nChecks whether a transform is the identity transform.\nChecks if array is empty.\nChecks if the array is empty.\nChecks that face is marked as <em>Italic</em>.\nChecks that face is marked as <em>Monospaced</em>.\nChecks if tag is null / <code>[0, 0, 0, 0]</code>.\nChecks that face is marked as <em>Oblique</em>.\nChecks if the face allows outline data to be embedded.\nChecks that face is marked as <em>Regular</em>.\nChecks if the face allows embedding a subset, further …\nChecks that face is variable.\nReturns face’s italic angle.\nA Kerning Table implementation.\nAn Extended Kerning Table implementation.\nReturns the last value.\nReturns array’s length.\nReturns array’s length.\nReturns a horizontal face line gap.\nAppends a LineTo segment.\nAn Index to Location Table implementation.\nA Math Table implementation.\nA Maximum Profile Table implementation.\nAn Extended Glyph Metamorphosis Table implementation.\nAppends a MoveTo segment.\nA Metrics Variations Table implementation.\nA Naming Table implementation.\nA list of name ID’s.\nAn axis name in the <code>name</code> table.\nReturns a list of names.\nCreates a new <code>LazyArray</code>.\nCreates a new <code>LazyArray</code>.\nCreates a new transform with the specified components.\nCreates a new <code>RgbaColor</code>.\nCreates a new translation transform.\nReturns a total number of glyphs in the face.\nThis module contains OpenType Layout supplementary tables …\nA OS/2 and Windows Metrics Table implementation.\nOutlines a glyph and returns its tight bounding box.\nPaints a color glyph from the <code>COLR</code> table.\nParses an object from a raw data.\nCreates a new <code>RawFace</code> from a raw data.\nCreates a new <code>Face</code> from a raw data.\nReturns face permissions.\nA pixels per em of the selected strike.\nLine position.\nA PostScript Table implementation.\nReturns the primary language.\nAppends a QuadTo segment.\nReturns a <code>RangeRecord</code> for a glyph.\nReturns the <code>RawFace</code> used to create this <code>Face</code>.\nReturns a language region.\nA Standard Bitmap Graphics Table implementation.\nSets a variation axis coordinate.\nReturns sub-array.\nReturns face’s strikeout metrics.\nReturns face style.\nReturns face’s subscript metrics.\nReturns face’s superscript metrics.\nAn SVG Table implementation.\nReturns the raw data of a selected table.\nReturns the raw data of a selected table.\nAn array of table records.\nReturns low-level face tables.\nLine thickness.\nReturns tag as 4-element byte array.\nReturns tag as 4-element byte array.\nA Tracking Table implementation.\nReturns a horizontal typographic face ascender.\nReturns a horizontal typographic face descender.\nReturns a horizontal typographic face line gap.\nReturns face’s underline metrics.\nReturns Unicode Ranges.\nReturns face’s units per EM.\nAn axis value.\nReturns an iterator over variation axes.\nReturns the current normalized variation coordinates.\nReturns a vertical face ascender.\nReturns a vertical face descender.\nReturns a vertical face height.\nReturns a vertical face line gap.\nA Vertical Header Table implementation.\nA Vertical Origin Table implementation.\nReturns face’s weight.\nReturns rect’s width.\nReturns face’s width.\nImage width.\nHorizontal offset.\nReturns face’s x height.\nThe horizontal maximum of the rect.\nThe horizontal minimum of the rect.\nX offset.\nHorizontal face size.\nVertical offset.\nThe vertical maximum of the rect.\nThe vertical minimum of the rect.\nY offset.\nVertical face size.\nAn anchor point.\nAn Anchor Point Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses a table from raw data.\nReturns a list of anchor points for the specified glyph.\nAn Extended State Table.\nA State Table entry.\nA lookup table.\nA legacy state entry used by StateTable.\nA State Table.\nA type-safe wrapper for a kerning value offset.\nPredefined classes.\nReturns a glyph class.\nReturns a glyph class.\nReturns a class entry.\nReturns a class entry.\nAdditional data.\nAdditional data.\nEntry flags.\nEntry flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf set, advance to the next glyph before going to the new …\nIf set, remember this glyph as the marked glyph.\nChecks that entry has an offset.\nIf set, push this glyph on the kerning stack.\nIf set, reset the kerning data (clear the stack).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns kerning at offset.\nProduces a new state.\nA new state.\nA new state.\nReturns the next offset.\nParses an Extended State Table from a stream.\nParses a lookup table from raw data.\nPredefined states.\nReturns a value associated with the specified glyph.\nReturns a value offset.\nAn axis value map.\nA list of segment maps.\nAn iterator over maps.\nAn Axis Variations Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA normalized coordinate value obtained using default …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any segments.\nReturns the number of segments.\nMaps coordinates.\nParses a table from raw data.\nThe segment maps array — one segment map for each axis …\nThe modified, normalized coordinate value.\nA Color Bitmap Data Table.\nReturns the argument unchanged.\nReturns a raster image for the glyph.\nCalls <code>U::from(self)</code>.\nParses a table from raw data.\nA Color Bitmap Location Table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParses a table from raw data.\nAn affine transformation matrix.\nA Compact Font Format Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the CID corresponding to a glyph ID.\nResolves a Glyph ID for a code point.\nReturns a glyph ID by a name.\nReturns a glyph name.\nReturns a glyph width.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a font transformation matrix.\nReturns a total number of glyphs in the font.\nOutlines a glyph.\nParses a table from raw data.\nA Compact Font Format 2 Table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOutlines a glyph.\nParses a table from raw data.\nA character encoding subtable variant.\nGlyph was found in the variation encoding table.\nA result of a variation glyph mapping.\nA character encoding subtable.\nA format 0 subtable.\nA format 10 subtable.\nA format 12 subtable.\nA format 13 subtable.\nA format 14 subtable.\nA format 2 subtable.\nA format 4 subtable.\nA format 6 subtable.\nA list of subtables.\nAn iterator over <code>Subtables</code>.\nA Character to Glyph Index Mapping Table.\nGlyph should be looked in other, non-variation tables.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for all codepoints contained in this subtable.\nSubtable encoding.\nFirst character code covered.\nFirst character code of subrange.\nA subtable format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a subtable at an index.\nJust a list of 256 8bit glyph IDs.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nMaps a character to a glyph ID.\nResolves a variation of a glyph ID from two code points.\nArray of glyph indices for the character codes covered.\nArray of glyph indexes for character codes in the range.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any subtables.\nChecks that the current encoding is Unicode compatible.\nReturns the number of subtables.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a table from raw data.\nSubtable platform.\nA list of subtables.\nThe composite mode ‘Clear’.\nA ClipBox.\nThe composite mode ‘Color’.\nThe composite mode ‘ColorBurn’.\nThe composite mode ‘ColorDodge’.\nA gradient extend.\nA composite mode\nThe composite mode ‘Darken’.\nThe composite mode ‘Destination’.\nThe composite mode ‘DestinationAtop’.\nThe composite mode ‘DestinationIn’.\nThe composite mode ‘DestinationOut’.\nThe composite mode ‘DestinationOver’.\nThe composite mode ‘Difference’.\nThe composite mode ‘Exclusion’.\nA gradient extend.\nAn iterator over stops of a gradient.\nThe composite mode ‘HardLight’.\nThe composite mode ‘Hue’.\nThe composite mode ‘Lighten’.\nA linear gradient\nA paint with a linear gradient.\nThe composite mode ‘Luminosity’.\nThe composite mode ‘Multiply’.\nThe composite mode ‘Overlay’.\nThe <code>Pad</code> gradient extend mode.\nA paint.\nA trait for color glyph painting.\nThe composite mode ‘Plus’.\nA radial gradient\nA paint with a radial gradient.\nThe <code>Reflect</code> gradient extend mode.\nThe <code>Repeat</code> gradient extend mode.\nThe composite mode ‘Saturation’.\nThe composite mode ‘Screen’.\nThe composite mode ‘SoftLight’.\nA paint with a solid color.\nThe composite mode ‘Source’.\nThe composite mode ‘SourceAtop’.\nThe composite mode ‘SourceIn’.\nThe composite mode ‘SourceOut’.\nThe composite mode ‘SourceOver’.\nA sweep gradient\nA paint with a sweep gradient.\nA Color Table.\nThe composite mode ‘Xor’.\nThe x of the center.\nThe y of the center.\nThe color of the color stop.\nWhether the table contains a definition for the given …\nThe end angle.\nThe extend.\nThe extend.\nThe extend.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the current table has version 0.\nOutline a glyph and store it.\nPaint the stored outline using the provided color.\nPaints the color glyph.\nParses a table from raw data.\nPop the last clip path.\nPop the last layer.\nPop the last transform.\nPush a new clip path using the currently stored outline.\nPush a new clip path using the clip box.\nPush a new layer with the given composite mode.\nPush a rotation transform.\nPush a scaling transform.\nPush a skewing transform.\nPush a transform.\nPush a translation transform.\nThe <code>r0</code> value.\nThe <code>r1</code> value.\nThe start angle.\nThe offset of the color stop.\nReturns an iterator over the stops of the linear gradient. …\nReturns an iterator over the stops of the radial gradient. …\nReturns an iterator over the stops of the sweep gradient. …\nThe <code>x0</code> value.\nThe <code>x0</code> value.\nThe <code>x1</code> value.\nThe <code>x1</code> value.\nThe <code>x2</code> value.\nThe horizontal maximum of the rect.\nThe horizontal minimum of the rect.\nThe <code>y0</code> value.\nThe <code>y0</code> value.\nThe <code>y1</code> value.\nThe <code>y1</code> value.\nThe <code>y2</code> value.\nThe vertical maximum of the rect.\nThe vertical minimum of the rect.\nA Color Palette Table.\nReturns the argument unchanged.\nReturns the color at the given index into the given …\nCalls <code>U::from(self)</code>.\nReturns the number of palettes.\nParses a table from raw data.\nA feature names.\nA list fo feature names.\nAn iterator over <code>FeatureNames</code>.\nA setting name.\nA Feature Name Table.\nThe index of the default setting in the <code>setting_names</code>.\nThe feature’s exclusive settings. If set, the feature …\nThe feature’s ID.\nFinds a feature name by ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a feature name at an index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any feature names.\nReturns the number of feature names.\nThe <code>name</code> table index for the feature’s name in a …\nThe <code>name</code> table index for the feature’s name in a …\nA list of feature names. Sorted by <code>FeatureName.feature</code>.\nParses a table from raw data.\nThe setting.\nThe feature’s setting names.\nA Font Variations Table.\nA variation axis.\nA list of variation axes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn axis name in the <code>name</code> table.\nParses a table from raw data.\nA glyph class.\nA Glyph Definition Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns glyph’s class according to Glyph Class …\nReturns glyph’s mark attachment class according to Mark …\nReturns glyph’s variation delta at a specified index …\nChecks that face has Glyph Class Definition Table.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that glyph is a mark according to Mark Glyph Sets …\nParses a table from raw data.\nA Glyph Data Table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOutlines a glyph.\nParses a table from raw data.\nAn Anchor Table.\nAn <code>Anchor</code> parsing helper.\nA <code>ValueRecord</code> pairs matrix used by <code>PairAdjustment</code>.\nA Cursive Attachment Positioning Subtable.\nA list of entry and exit <code>Anchor</code> pairs.\nA Device Table.\nA Device Table hinting values.\nAn array or ligature anchor matrices.\nA Mark Array.\nA Mark-to-Base Attachment Positioning Subtable.\nA Mark-to-Ligature Attachment Positioning Subtable.\nA Mark-to-Mark Attachment Positioning Subtable.\nA Pair Adjustment Positioning Subtable.\nA <code>ValueRecord</code> pairs set used by <code>PairAdjustment</code>.\nA list of <code>PairSet</code>s.\nA glyph positioning lookup subtable enumeration.\nA Single Adjustment Positioning Subtable.\nA Value Record.\nAn array of Value Records.\nA Device Table indexes into Item Variation Store.\nAn anchors matrix.\nA base coverage.\nNumber of columns in the matrix.\nReturns the subtable coverage.\nReturns the subtable coverage.\nReturns the subtable coverage.\nReturns an entry <code>Anchor</code> at index.\nReturns an exit <code>Anchor</code> at index.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>ValueRecord</code> at index.\nReturns a <code>ValueRecord</code> pair using the second glyph.\nReturns a value at <code>index</code>.\nReturns a <code>ValueRecord</code> pair using specified classes.\nReturns an <code>AnchorMatrix</code> at index.\nReturns contained data at index.\nReturns an <code>Anchor</code> at position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the array is empty.\nChecks if the array is empty.\nChecks if the set is empty.\nChecks if the array is empty.\nChecks if the array is empty.\nReturns array’s length.\nReturns array’s length.\nReturns the number of items.\nReturns the array length.\nReturns the array length.\nA mark coverage.\nA list of mark anchors.\nNumber of rows in the matrix.\nHorizontal value, in design units.\nHorizontal adjustment for advance, in design units — …\nA <code>Device</code> table with horizontal adjustment for advance.\nReturns X-axis delta.\nA <code>Device</code> table with horizontal value.\nHorizontal adjustment for placement, in design units.\nA <code>Device</code> table with horizontal adjustment for placement.\nVertical value, in design units.\nVertical adjustment for advance, in design units — only …\nA <code>Device</code> table with vertical adjustment for advance.\nReturns Y-axis delta.\nA <code>Device</code> table with vertical value.\nVertical adjustment for placement, in design units.\nA <code>Device</code> table with vertical adjustment for placement.\nA list of glyphs for Alternate Substitution Subtable.\nA set of <code>AlternateSet</code>.\nA Alternate Substitution Subtable.\nGlyph components for one ligature.\nA <code>Ligature</code> set.\nA list of <code>Ligature</code> sets.\nA Ligature Substitution Subtable.\nA Multiple Substitution Subtable.\nA Reverse Chaining Contextual Single Substitution Subtable.\nA sequence of glyphs for Multiple Substitution Subtable.\nA list of <code>Sequence</code> tables.\nA Single Substitution Subtable.\nA glyph substitution lookup subtable enumeration.\nArray of alternate glyph IDs, in arbitrary order.\nGlyph components for one ligature.\nReturns the subtable coverage.\nReturns the subtable coverage.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLigature to substitute.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that the current subtable is <em>Reverse Chaining </em>…\nA list of substitute glyphs.\nA Glyph Variations Table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOutlines a glyph.\nParses a table from raw data.\nAn index format used by the Index to Location Table.\nA Font Header Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA bounding box that large enough to enclose any glyph from …\nAn index format used by the Index to Location Table.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses a table from raw data.\nUnits per EM.\nA Horizontal Header Table.\nFace ascender.\nFace descender.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFace line gap.\nNumber of metrics in the <code>hmtx</code> table.\nParses a table from raw data.\nHorizontal/Vertical Metrics.\nA Horizontal/Vertical Metrics Table.\nReturns advance for a glyph.\nWidth/Height advance for <code>hmtx</code>/<code>vmtx</code>.\nSide bearings for glyph IDs greater than or equal to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA list of metrics indexed by glyph ID.\nSum of long metrics + bearings.\nParses a table from raw data.\nReturns side bearing for a glyph.\nLeft/Top side bearing for <code>hmtx</code>/<code>vmtx</code>.\nA Horizontal/Vertical Metrics Variations Table.\nReturns advance offset for a glyph.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParses a table from raw data.\nReturns side bearing offset for a glyph.\nA kerning subtable format.\nA kerning pair.\nA kerning subtable.\nA format 0 subtable.\nA format 2 subtable.\nA format 3 subtable.\nA list of subtables.\nAn iterator over kerning subtables.\nA Kerning Table.\nSubtable format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns kerning for a pair of glyphs.\nReturns kerning for a pair of glyphs.\nReturns kerning for a pair of glyphs.\nReturns kerning for a pair of glyphs.\nIndicates that subtable has a cross-stream values.\nIndicates that subtable uses a state machine.\nIndicates that subtable is for horizontal text.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any subtables.\nReturns left glyph ID.\nReturns the number of subtables.\nGlyphs pair.\nA list of kerning pairs.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a table from raw data.\nReturns right glyph ID.\nA list of subtables.\nKerning value.\nIndicates that subtable is variable.\nA container of Anchor Points used by <code>Subtable4</code>.\nA state machine entry.\nAn extended kerning subtable format.\nA kerning subtable.\nA format 0 subtable.\nA format 1 subtable.\nA format 2 subtable.\nA format 4 subtable.\nA format 6 subtable.\nA list of extended kerning subtables.\nAn iterator over extended kerning subtables.\nAn Extended Kerning Table.\nAn action index.\nAnchor points.\nSubtable format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a mark and current anchor points at action index.\nReturns kerning for a pair of glyphs.\nReturns kerning at action index.\nReturns kerning for a pair of glyphs.\nReturns kerning for a pair of glyphs.\nReturns kerning for a pair of glyphs.\nIndicates that subtable has a cross-stream values.\nIndicates that subtable uses a state machine.\nIndicates that subtable is for horizontal text.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA list of kerning pairs.\nParses a table from raw data.\nA state table.\nA state table.\nA list of subtables.\nThe tuple count.\nIndicates that subtable is variable.\nLong offsets.\nShort offsets.\nAn Index to Location Table.\nReturns the argument unchanged.\nReturns glyph’s range in the <code>glyf</code> table.\nCalls <code>U::from(self)</code>.\nChecks if there are any offsets.\nReturns the number of offsets.\nParses a table from raw data.\nA Math Constants Table.\nA Glyph Assembly Table.\nA Math Glyph Construction Table.\nA mapping from glyphs to Math Glyph Construction Tables.\nA Math Glyph Info Table.\nDetails for a glyph part in an assembly.\nDescription of math glyph variants.\nA Math Kern Table.\nAn entry in a Math Kern Info Table.\nA Math Kern Info Table.\nA Math Value with optional device corrections.\nA mapping from glyphs to Math Values.\nGlyph part flags.\nA Math Table.\nA Math Variants Table.\nMaximum (ink) height of accent base that does not require …\nAdvance width/height, in design units, of the variant …\nA general recipe on how to construct a variant with large …\nAxis height of the font.\nThe kerning data for the bottom-left corner.\nThe kerning data for the bottom-right corner.\nMath positioning constants.\nNumber of heights at which the kern value changes.\nMinimum height required for a delimited expression …\nDevice corrections for this value.\nMinimum height of n-ary operators (such as integral and …\nLengths of the connectors on the end of the glyph, in font …\nGlyphs which are <em>extended shapes</em>.\nMaximum (ink) height of accent base that does not require …\nMinimum tolerated gap between the (ink) top of the …\nStandard shift down applied to the denominator in display …\nMinimum tolerated gap between the (ink) top of the …\nStandard shift down applied to the denominator.\nMinimum tolerated gap between the (ink) bottom of the …\nStandard shift up applied to the numerator in display …\nMinimum tolerated gap between the (ink) bottom of the …\nStandard shift up applied to the numerator.\nThickness of the fraction bar.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe full advance of the part, in font design units.\nReturns the value for the glyph or <code>None</code> if it is not …\nReturns the kerning info for the glyph or <code>None</code> if it is …\nReturns the construction for the glyph or <code>None</code> if it is …\nGlyph ID for the part.\nPer-glyph positioning information.\nThe correction height at the given index.\nConstructions for shapes growing in the horizontal …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPer-glyph italics correction values.\nThe italics correction of the assembled glyph.\nThe kern value at the given index.\nPer-glyph information for mathematical kerning.\nMinimum distance between baseline of the lower limit and …\nMinimum gap between (ink) top of the lower limit, and …\nWhite space to be left between math formulas to ensure …\nMinimum overlap of connecting glyphs during glyph …\nExtra white space reserved above the overbar.\nThickness of overbar.\nDistance between the overbar and the (ink) top of he base.\nParses a table from raw data.\nPart flags.\nParts the assembly is composed of.\nHeight of the bottom of the radical degree, if such is …\nSpace between the (ink) top of the expression and the bar …\nExtra white space reserved above the radical.\nNegative kern after the degree of a radical, if such is …\nExtra horizontal kern before the degree of a radical, if …\nThickness of the radical rule.\nSpace between the (ink) top of the expression and the bar …\nPercentage of scaling down for level 1 superscripts and …\nPercentage of scaling down for level 2 (scriptScript) …\nHorizontal distance between the top and bottom elements of …\nVertical distance between the ink of the top and bottom …\nExtra white space to be added after each subscript and …\nStandard shift down applied to the bottom element of a …\nStandard shift down applied to the bottom element of a …\nMinimum gap between (ink) bottom of the top element of a …\nMinimum gap between (ink) bottom of the top element of a …\nStandard shift up applied to the top element of a stack in …\nStandard shift up applied to the top element of a stack.\nLengths of the connectors on the start of the glyph, in …\nStandard shift down applied to the bottom element of the …\nMinimum gap between the ink of the stretched element, and …\nMinimum gap between the ink of the stretched element, and …\nStandard shift up applied to the top element of the …\nMinimum gap between the superscript and subscript ink.\nMinimum allowed drop of the baseline of subscripts …\nThe standard shift down applied to subscript elements.\nMaximum allowed height of the (ink) top of subscripts that …\nMaximum allowed drop of the baseline of superscripts …\nThe maximum level to which the (ink) bottom of superscript …\nMinimum allowed height of the (ink) bottom of superscripts …\nStandard shift up applied to superscript elements.\nStandard shift of superscripts relative to the base, in …\nPer-glyph horizontal positions for attaching mathematical …\nThe kerning data for the top-left corner.\nThe kerning data for the top-right corner.\nExtra white space reserved below the underbar.\nThickness of underbar.\nDistance between underbar and (ink) bottom of the base.\nMinimum distance between baseline of upper limit and (ink) …\nMinimum gap between the (ink) bottom of the upper limit, …\nThe X or Y value in font design units.\nThe ID of the variant glyph.\nPrepared variants of the glyph with varying advances.\nVariants and assembly recipes for growable glyphs.\nConstructions for shapes growing in the vertical direction.\nA Maximum Profile Table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe total number of glyphs in the face.\nParses a table from raw data.\nA metamorphosis chain.\nA list of metamorphosis chains.\nAn iterator over metamorphosis chains.\nA contextual subtable state table trailing data.\nA contextual subtable.\nA subtable coverage.\nThe feature table is used to compute the sub-feature flags …\nA contextual subtable state table trailing data.\nAn insertion subtable.\nA ligature subtable.\nA subtable in a metamorphosis chain.\nA subtable kind.\nA list of subtables in a metamorphosis chain.\nAn iterator over a metamorphosis chain subtables.\nAn Extended Glyph Metamorphosis Table.\nA list of metamorphosis chains.\nLigature components.\nA subtable coverage.\nA current index.\nA current insert index.\nDefault chain features.\nComplement of flags for the settings that this feature and …\nFlags for the settings that this feature and setting …\nSubtable feature flags.\nA list of chain features.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsertion glyphs.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf true, this subtable will be applied to both horizontal …\nIf true, this subtable will process glyphs in descending …\nIf true, this subtable will process glyphs in logical order\nIf true, this subtable will only be applied to vertical …\nThe type of feature.\nA subtable kind.\nLigature actions.\nLigatures.\nReturns a Lookup at index.\nA mark index.\nA marked insert index.\nParses a table from raw data.\nThe feature’s setting (aka selector).\nThe contextual glyph substitution state table.\nA state table.\nA state table.\nA list of chain subtables.\nA Metrics Variations Table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a metric offset by tag.\nParses a table from raw data.\nA Name Record.\nA list of face names.\nAn iterator over face names.\nA platform ID.\nA Naming Table.\nA platform-specific encoding ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a name at index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any name records.\nChecks that the current Name data has a Unicode encoding.\nReturns a Name language.\nA language ID.\nReturns a number of name records.\nA raw name data.\nA Name ID.\nA list of names.\nParses a table from raw data.\nA platform ID.\nReturns the Name’s data as a UTF-8 string.\nA Chained Contextual Lookup Subtable.\nA Chained Sequence Rule.\nA set of <code>ChainedSequenceRule</code>.\nA list of <code>ChainedSequenceRule</code> sets.\nA value of Class Definition Table.\nA Class Definition Table.\nA Contextual Lookup Subtable.\nA Coverage Table.\nA Feature.\nAn index in <code>FeatureList</code>.\nA list of <code>Feature</code> records.\nA Feature Variations Table.\nSimple glyph contexts.\nSimple glyph contexts.\nClass-based glyph contexts.\nClass-based glyph contexts.\nCoverage-based glyph contexts.\nCoverage-based glyph contexts.\nAn index in <code>LanguageSystemList</code>.\nA Language System Table.\nA list of <code>LanguageSystem</code> records.\nA Layout Table.\nA Lookup Table.\nLookup table flags.\nAn index in <code>LookupList</code>.\nA list of <code>Lookup</code> values.\nA trait for parsing Lookup subtables.\nA list of lookup subtables.\nAn iterator over lookup subtables.\nA record that describes a range of glyph IDs.\nA data storage used by <code>ScriptList</code>, <code>LanguageSystemList</code> and …\nA trait to parse item in <code>RecordList</code>.\nAn iterator over <code>RecordList</code> values.\nA Script Table.\nAn index in <code>ScriptList</code>.\nA list of <code>Script</code> records.\nA sequence rule record.\nA sequence rule.\nA set of <code>SequenceRule</code>s.\nA list of <code>SequenceRuleSet</code>s.\nAn index in <code>FeatureVariations</code>.\nContains either glyph IDs or glyph Classes.\nChecks that glyph is present.\nReturns the subtable coverage.\nReturns the subtable coverage.\nDefault language.\nLast glyph ID in the range\nArray of indices into the FeatureList, in arbitrary order.\nA list of all supported features.\nReturns RecordList value by <code>Tag</code>.\nReturns a <code>VariationIndex</code> for variation coordinates.\nReturns a <code>Feature</code> at specified indices.\nLookup qualifiers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns RecordList value by index.\nParses a subtable at index.\nReturns the coverage index of the glyph or <code>None</code> if it is …\nReturns the glyph class of the glyph (zero if it is not …\nReturns RecordList value index by <code>Tag</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an iterator over subtables.\nChecks that RecordList is empty.\nChecks if there are any items.\nList of supported languages, excluding the default one. …\nReturns a number of items in the RecordList.\nReturns a number of items in the LookupSubtables.\nContains either glyph IDs or glyph Classes.\nA list of all lookups.\nIndex into GDEF mark glyph sets structure.\nParses raw data.\nParses raw data.\nIndex of a feature required for this language system.\nA list of all supported scripts.\nFirst glyph ID in the range\nAvailable subtables.\nScript tag.\nLanguage tag.\nCoverage Index of first glyph ID in range.\nUsed to substitute an alternate set of lookup tables to …\nArray of glyph IDs. Sorted.\nArray of glyph ranges. Ordered by <code>RangeRecord.start</code>.\nA form that is generally cursive in nature.\nA face that is neither italic not obliqued.\nA typically-sloped version of the regular face.\nFace permissions.\nA script metrics used by subscript and superscript.\nA face style.\nA OS/2 and Windows Metrics Table.\nUnicode Ranges.\nA face weight.\nA face width.\nReturns capital height.\nChecks if ranges contain the specified character.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if face is bold.\nChecks if the face allows outline data to be embedded.\nChecks if the face allows embedding a subset, further …\nParses a table from raw data.\nReturns face permissions.\nReturns strikeout metrics.\nReturns style.\nReturns subscript metrics.\nReturns superscript metrics.\nReturns a numeric representation of a weight.\nReturns a numeric representation of a width.\nReturns typographic ascender.\nReturns typographic descender.\nReturns typographic line gap.\nReturns Unicode ranges.\nChecks if typographic metrics should be used.\nTable version.\nReturns weight class.\nReturns face width.\nReturns Windows ascender.\nReturns Windows descender.\nReturns x height.\nX offset.\nHorizontal face size.\nY offset.\nVertical face size.\nAn iterator over glyph names.\nA PostScript Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a glyph ID by a name.\nReturns a glyph name by ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFlag that indicates that the font is monospaced.\nItalic angle in counter-clockwise degrees from the …\nReturns an iterator over glyph names.\nParses a table from raw data.\nUnderline metrics.\nA strike of glyphs.\nA list of <code>Strike</code>s.\nAn iterator over <code>Strikes</code>.\nA Standard Bitmap Graphics Table.\nSelects the best matching <code>Strike</code> based on <code>pixels_per_em</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a glyph data.\nReturns a strike at the index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any glyphs.\nChecks if there are any strikes.\nReturns the number of glyphs in this strike.\nReturns the number of strikes.\nParses a table from raw data.\nThe pixels per EM size for which this strike was designed.\nThe device pixel density (in PPI) for which this strike …\nA list of <code>Strike</code>s.\nAn SVG documents.\nA list of SVG documents.\nAn iterator over <code>SvgDocumentsList</code> values.\nAn SVG Table.\nThe SVG document data.\nA list of SVG documents.\nThe last glyph ID, <em>inclusive</em>, for the range covered by …\nReturns a SVG document data by glyph ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns SVG document data at index.\nReturns the glyphs range.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the list is empty.\nReturns the number of SVG documents in the list.\nParses a table from raw data.\nThe first glyph ID for the range covered by this record.\nA Tracking Table.\nA single track.\nA track data.\nA list of tracks.\nAn iterator over <code>Tracks</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a track at index.\nHorizontal track data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any tracks.\nReturns the number of tracks.\nThe <code>name</code> table index for the track’s name.\nParses a table from raw data.\nA list of sizes.\nA list of tracks.\nA track value.\nA list of tracking values for each size.\nVertical track data.\nA Vertical Header Table.\nFace ascender.\nFace descender.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFace line gap.\nNumber of metrics in the <code>vmtx</code> table.\nParses a table from raw data.\nA Vertical Origin Table.\nVertical origin metrics for the Vertical Origin Table.\nDefault origin.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGlyph ID.\nReturns glyph’s Y origin.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA list of metrics for each glyph.\nParses a table from raw data.\nY coordinate, in the font’s design coordinate system, of …\nA multi-line text editor.\nA weak reference to an <code>Editor</code>.\nThe bounds of the <code>Editor</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTries to update the reference into an <code>Editor</code>.\nA bunch of text.\nA weak reference to a <code>Paragraph</code>.\nReturns the argument unchanged.\nThe horizontal alignment of the <code>Paragraph</code>.\nCalls <code>U::from(self)</code>.\nThe minimum bounds of the <code>Paragraph</code>.\nTries to update the reference into a <code>Paragraph</code>.\nThe vertical alignment of the <code>Paragraph</code>.\nThe appearance of a program.\nThe default style of a <code>Program</code>.\nThe <code>Executor</code> that will run commands and subscriptions.\nThe data needed to initialize your <code>Program</code>.\nThe type of <strong>messages</strong> your <code>Program</code> will produce.\nAn interactive, native, cross-platform, multi-windowed …\nThe graphics backend to use to draw the <code>Program</code>.\nThe state of a multi-windowed <code>Program</code>.\nThe theme used to draw the <code>Program</code>.\nReturns the current background <code>Color</code> of the <code>State</code>.\nThe background <code>iced_core::Color</code> of the application.\nBuild the user interface for every window.\nReturns the current cursor position of the <code>State</code>.\nThe default <code>Appearance</code> of a <code>Program</code> with the built-in …\nReturns the default style of a <code>Program</code>.\nReturns the argument unchanged.\nReturns the current icon <code>Color</code> of the <code>State</code>.\nThe default icon <code>iced_core::Color</code> of the application.\nCalls <code>U::from(self)</code>.\nReturns the logical <code>Size</code> of the <code>Viewport</code> of the <code>State</code>.\nReturns the current keyboard modifiers of the <code>State</code>.\nInitializes the <code>Program</code> with the flags provided to <code>run</code> as …\nCreates a new <code>State</code> for the provided <code>Program</code>’s <code>window</code>.\nReturns the physical <code>Size</code> of the <code>Viewport</code> of the <code>State</code>.\nRuns a <code>Program</code> with an executor, compositor, and the …\nReturns the current scale factor of the <code>Viewport</code> of the …\nReturns the scale factor of the window of the <code>Program</code>.\nReturns the <code>Style</code> variation of the <code>Theme</code>.\nReturns the event <code>Subscription</code> for the current state of the\nSynchronizes the <code>State</code> with its <code>Program</code> and its respective …\nReturns the current text <code>Color</code> of the <code>State</code>.\nThe default text <code>iced_core::Color</code> of the application.\nReturns the current <code>Theme</code> of the <code>Program</code>.\nReturns the current theme of the <code>State</code>.\nReturns the current title of the <code>Program</code>.\nHandles a <strong>message</strong> and updates the state of the <code>Program</code>.\nProcesses the provided window event and updates the <code>State</code> …\nReturns true if the provided event should cause a <code>Program</code> …\nReturns the widgets to display in the <code>Program</code> for the …\nReturns the current <code>Viewport</code> of the <code>State</code>.\nReturns the version of the <code>Viewport</code> of the <code>State</code>.\nAn action that the iced runtime can perform.\nThe appearance of a program.\nRun a clipboard action.\nThe default style of a <code>Program</code>.\nRun a Dnd action.\nExits the runtime.\nLoad a font from its bytes.\nThe type of <strong>messages</strong> your <code>Program</code> will produce.\nOutput some value.\nRun a platform specific action\nThe core of a user interface application following The Elm …")
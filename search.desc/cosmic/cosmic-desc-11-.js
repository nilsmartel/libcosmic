searchState.loadedDescShard("cosmic", 11, "Returns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner sinks.\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nGet a pinned mutable reference to the inner sinks.\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nGet a shared reference to the inner sinks.\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sinks.\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nWrap this sink in an <code>Either</code> sink, making it the left-hand …\nFlush any remaining output and close this sink, if …\nA convenience method for calling <code>Sink::poll_close</code> on <code>Unpin</code> …\nFlush any remaining output from this sink.\nA convenience method for calling <code>Sink::poll_flush</code> on <code>Unpin</code> …\nAttempts to prepare the <code>Sink</code> to receive a value.\nA convenience method for calling <code>Sink::poll_ready</code> on <code>Unpin</code> …\nWrap this stream in an <code>Either</code> stream, making it the …\nA future that completes after the given item has been …\nA future that completes after the given stream has been …\nMap this sink’s error to a different error type using …\nTransforms the error returned by the sink.\nBegin the process of sending a value to the sink. Each …\nA convenience method for calling <code>Sink::start_send</code> on <code>Unpin</code> …\nCreate a sink from a function which processes one item at …\nComposes a function <em>in front of</em> the sink.\nComposes a function <em>in front of</em> the sink.\nA handle to an <code>Abortable</code> task.\nA registration handle for an <code>Abortable</code> task. Values of …\nA future/stream which can be remotely short-circuited …\nIndicator that the <code>Abortable</code> task was aborted.\nFuture for the <code>all</code> method.\nStream for the <code>and_then</code> method.\nFuture for the <code>any</code> method.\nAn owned dynamically typed <code>Stream</code> for use in cases where …\nStream for the <code>buffer_unordered</code> method.\nStream for the <code>buffered</code> method.\nStream for the <code>catch_unwind</code> method.\nStream for the <code>chain</code> method.\nStream for the <code>chunks</code> method.\nFuture for the <code>collect</code> method.\nFuture for the <code>concat</code> method.\nFuture for the <code>count</code> method.\nStream for the <code>cycle</code> method.\nStream for the <code>empty</code> function.\nStream for the <code>enumerate</code> method.\nStream for the <code>err_into</code> method.\nThe type of failures yielded by this future\nStream for the <code>filter</code> method.\nStream for the <code>filter_map</code> method.\nStream for the <code>flat_map</code> method.\nStream for the <code>flat_map_unordered</code> method.\nStream for the <code>flatten</code> method.\nStream for the <code>flatten_unordered</code> method.\nFuture for the <code>fold</code> method.\nFuture for the <code>for_each</code> method.\nFuture for the <code>for_each_concurrent</code> method.\nFuture for the <code>forward</code> method.\nStream for the <code>fuse</code> method.\nA stream which tracks whether or not the underlying stream …\nAn unbounded queue of futures.\nA set of futures which may complete in any order.\nStream for the <code>inspect</code> method.\nStream for the <code>inspect_err</code> method.\nStream for the <code>inspect_ok</code> method.\nReader for the <code>into_async_read</code> method.\nStream for the <code>into_stream</code> method.\nValues yielded by the stream.\nStream for the <code>iter</code> function.\nPoll the first stream.\n<code>BoxStream</code>, but without the <code>Send</code> requirement.\nStream for the <code>map</code> method.\nStream for the <code>map_err</code> method.\nStream for the <code>map_ok</code> method.\nFuture for the <code>next</code> method.\nFuture for the <code>Peekable::next_if</code> method.\nFuture for the <code>Peekable::next_if_eq</code> method.\nThe type of successful values yielded by this future\nA stream which emits single element and then EOF.\nStream for the <code>or_else</code> method.\nFuture for the <code>Peekable::peek</code> method.\nFuture for the <code>Peekable::peek_mut</code> method.\nA <code>Stream</code> that implements a <code>peek</code> method.\nStream for the <code>pending()</code> function.\nStream for the <code>poll_fn</code> function.\nStream for the poll_immediate function.\nType to tell <code>SelectWithStrategy</code> which stream to poll next.\nStream for the <code>ready_chunks</code> method.\nStream for the <code>repeat</code> function.\nAn stream that repeats elements of type <code>A</code> endlessly by …\nError indicating a <code>SplitSink&lt;S&gt;</code> and <code>SplitStream&lt;S&gt;</code> were …\nPoll the second stream.\nStream for the <code>scan</code> method.\nStream for the <code>select()</code> function.\nAn unbounded set of streams\nFuture for the <code>select_next_some</code> method.\nStream for the <code>select_with_strategy()</code> function. See …\nStream for the <code>skip</code> method.\nStream for the <code>skip_while</code> method.\nA <code>Sink</code> part of the split pair\nA <code>Stream</code> part of the split pair\nA stream of values produced asynchronously.\nAn extension trait for <code>Stream</code>s that provides a variety of …\nFuture for the <code>into_future</code> method.\nStream for the <code>take</code> method.\nStream for the <code>take_until</code> method.\nStream for the <code>take_while</code> method.\nStream for the <code>then</code> method.\nFuture for the <code>try_all</code> method.\nFuture for the <code>try_any</code> method.\nStream for the <code>try_buffer_unordered</code> method.\nStream for the <code>try_buffered</code> method.\nStream for the <code>try_chunks</code> method.\nError indicating, that while chunk was collected inner …\nFuture for the <code>try_collect</code> method.\nFuture for the <code>try_concat</code> method.\nStream for the <code>try_filter</code> method.\nStream for the <code>try_filter_map</code> method.\nStream for the <code>try_flatten</code> method.\nStream for the <code>try_flatten_unordered</code> method.\nFuture for the <code>try_fold</code> method.\nFuture for the <code>try_for_each</code> method.\nFuture for the <code>try_for_each_concurrent</code> method.\nFuture for the <code>try_next</code> method.\nStream for the <code>try_ready_chunks</code> method.\nError indicating, that while chunk was collected inner …\nStream for the <code>try_skip_while</code> method.\nA convenience for streams that return <code>Result</code> values that …\nAdapters specific to <code>Result</code>-returning streams\nStream for the <code>try_take_while</code> method.\nStream for the <code>try_unfold</code> function.\nStream for the <code>unfold</code> function.\nFuture for the <code>unzip</code> method.\nStream for the <code>zip</code> method.\nAbort the <code>Abortable</code> stream/future associated with this …\nCreates a new <code>Abortable</code> stream and an <code>AbortHandle</code> which …\nExecute predicate over asynchronous stream, and return <code>true</code>…\nChain on a computation for when a value is ready, passing …\nExecute predicate over asynchronous stream, and return <code>true</code>…\nWrap the stream in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nAn adaptor for creating a buffered list of pending futures …\nAn adaptor for creating a buffered list of pending futures.\nBorrows a stream, rather than consuming it.\nCatches unwinding panics while polling the stream.\nAdapter for chaining two streams.\nAn adaptor for chunking up items of the stream inside a …\nClears the set, removing all futures.\nClears the set, removing all streams.\nTransforms a stream into a collection, returning a future …\nConcatenate all items of a stream into a single extendable …\nDrives the stream to completion, counting the number of …\nRepeats a stream endlessly.\nCreates a stream which contains no elements.\nCreates a stream which gives the current iteration count …\nWraps the current stream in a new stream which converts …\nFilters the values produced by this stream according to …\nFilters the values produced by this stream while …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nFlattens a stream of streams into just one continuous …\nFlattens a stream of streams into just one continuous …\nExecute an accumulating asynchronous computation over a …\nRuns this stream to completion, executing the provided …\nRuns this stream to completion, executing the provided …\nA future that completes after the given stream has been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuse a stream such that <code>poll_next</code> will never again be …\nAn unbounded set of futures.\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying stream that …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying streams …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying iterator …\nAcquires a mutable reference to the underlying streams …\nAcquires a mutable reference to the underlying streams …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying …\nAcquires a pinned mutable reference to the underlying …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying stream that this …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying streams that this …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying iterator that this …\nAcquires a reference to the underlying streams that this …\nAcquires a reference to the underlying streams that this …\nCreate an <code>AbortHandle</code> from the given <code>AbortRegistration</code>.\nDo something with each item of this stream, afterwards …\nDo something with the error value of this stream, …\nDo something with the success value of this stream, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdapter that converts this stream into an <code>AsyncBufRead</code>.\nConverts this stream into a future of …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying stream.\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying streams.\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this stream, returning the underlying iterator.\nConsumes this combinator, returning the underlying streams.\nConsumes this combinator, returning the underlying streams.\nWraps a <code>TryStream</code> into a type that implements <code>Stream</code>\nChecks whether the task has been aborted. Note that all …\nChecks whether <code>AbortHandle::abort</code> was <em>called</em> on any …\nReturns whether the underlying stream has finished or not.\nReturns <code>true</code> if the queue contains no futures\nReturns <code>true</code> if the set contains no futures.\nReturns <code>true</code> if the set contains no streams\nReturns <code>true</code> if the <code>SplitStream&lt;S&gt;</code> and <code>SplitSink&lt;S&gt;</code> …\nReturns <code>true</code> if the <code>SplitStream&lt;S&gt;</code> and <code>SplitSink&lt;S&gt;</code> …\nWhether the stream was stopped yet by the stopping future …\nReturns <code>true</code> if the stream should no longer be polled.\nConverts an <code>Iterator</code> into a <code>Stream</code> which is always ready …\nReturns an iterator that allows inspecting each future in …\nReturns an iterator that allows inspecting each stream in …\nReturns an iterator that allows modifying each future in …\nReturns an iterator that allows modifying each stream in …\nReturns an iterator that allows modifying each future in …\nReturns an iterator that allows inspecting each future in …\nWrap this stream in an <code>Either</code> stream, making it the …\nReturns the number of futures contained in the queue.\nReturns the number of futures contained in the set.\nReturns the number of streams contained in the set.\nMaps this stream’s items to a different type, returning …\nWraps the current stream in a new stream which maps the …\nWraps the current stream in a new stream which maps the …\nConstructs a new, empty <code>FuturesOrdered</code>\nConstructs a new, empty <code>FuturesUnordered</code>.\nConstructs a new, empty <code>SelectAll</code>\nCreates a new <code>Abortable</code> future/stream using an existing …\nCreates an (<code>AbortHandle</code>, <code>AbortRegistration</code>) pair which can …\nCreates a future that resolves to the next item in the …\nCreates a future which will consume and return the next …\nCreates a future which will consume and return the next …\nCreates a stream of a single element.\nChain on a computation for when an error happens, passing …\nProduces a future which retrieves a reference to the next …\nProduces a future which retrieves a mutable reference to …\nCreates a new stream which exposes a <code>peek</code> method.\nCreates a stream which never returns any elements.\nCreates a new stream wrapping a function returning …\nCreates a new stream that always immediately returns …\nAttempt to pull out the next value of this stream, …\nA convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>\nPeek retrieves a reference to the next item in the stream.\nPeek retrieves a mutable reference to the next item in the …\nPush a future into the queue.\nPush a future into the set.\nPush a stream into the set.\nPushes a future to the back of the queue.\nPushes a future to the front of the queue.\nAn adaptor for chunking up ready items of the stream …\nCreate a stream which produces the same item repeatedly.\nCreates a new stream that repeats elements of type <code>A</code> …\nAttempts to put the two “halves” of a split …\nAttempts to put the two “halves” of a split …\nWrap this stream in an <code>Either</code> stream, making it the …\nCombinator similar to <code>StreamExt::fold</code> that holds internal …\nThis function will attempt to pull items from both …\nAn unbounded set of streams\nConvert a list of streams into a <code>Stream</code> of results from …\nReturns a <code>Future</code> that resolves when the next item in this …\nThis function will attempt to pull items from both …\nReturns the bounds on the remaining length of the stream.\nCreates a new stream which skips <code>n</code> items of the underlying …\nSkip elements on this stream while the provided …\nSplits this <code>Stream + Sink</code> object into separate <code>Sink</code> and …\nCreates a new stream of at most <code>n</code> items of the underlying …\nExtract the stopping future out of the combinator. The …\nOnce the stopping future is resolved, this method can be …\nTake elements from this stream until the provided future …\nTake elements from this stream while the provided …\nComputes from this stream’s items new items of a …\nToggle the value and return the old one.\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute several futures from a stream …\nAttempt to execute several futures from a stream …\nAn adaptor for chunking up successful items of the stream …\nAttempt to transform a stream into a collection, returning …\nAttempt to concatenate all items of a stream into a single …\nAttempt to filter the values produced by this stream …\nAttempt to filter the values produced by this stream while …\nFlattens a stream of streams into just one continuous …\nFlattens a stream of streams into just one continuous …\nAttempt to execute an accumulating asynchronous …\nAttempts to run this stream to completion, executing the …\nAttempts to run this stream to completion, executing the …\nCreates a future that attempts to resolve the next item in …\nPoll this <code>TryStream</code> as if it were a <code>Stream</code>.\nA convenience method for calling <code>TryStream::try_poll_next</code> …\nAn adaptor for chunking up successful, ready items of the …\nSkip elements on this stream while the provided …\nTake elements on this stream while the provided …\nCreates a <code>TryStream</code> from a seed and a closure returning a …\nCreates a <code>Stream</code> from a seed and a closure returning a …\nConverts a stream of pairs into a future, which resolves …\nAn adapter for zipping two streams together.\nA set of futures which may complete in any order.\nOwned iterator over all futures in the unordered set.\nImmutable iterator over all the futures in the unordered …\nMutable iterator over all futures in the unordered set.\nMutable iterator over all futures in the unordered set.\nImmutable iterator over all futures in the unordered set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOwned iterator over all streams in the unordered set.\nImmutable iterator over all streams in the unordered set.\nMutable iterator over all streams in the unordered set.\nAn unbounded set of streams\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a list of streams into a <code>Stream</code> of results from …\nA way of waking up a specific task.\nA synchronization primitive for task wakeup.\nThe context of an asynchronous task.\nA custom trait object for polling futures, roughly akin to …\nA custom trait object for polling futures, roughly akin to …\nThe <code>LocalSpawn</code> is similar to <code>Spawn</code>, but allows spawning …\nExtension trait for <code>LocalSpawn</code>.\nRepresents that a value is not ready yet.\nIndicates whether a value is available or if the current …\nA <code>RawWaker</code> allows the implementor of a task executor to …\nA virtual function pointer table (vtable) that specifies …\nRepresents that a value is immediately ready.\nThe <code>Spawn</code> trait allows for pushing futures onto an …\nAn error that occurred during spawning.\nExtension trait for <code>Spawn</code>.\nA custom implementation of a future trait object for …\nA <code>Waker</code> is a handle for waking up a task by notifying its …\nA <code>Waker</code> that is only valid for a given lifetime.\nAssigns a clone of <code>source</code> to <code>self</code>, unless …\nGets the <code>data</code> pointer used to create this <code>Waker</code>.\nDrops the future represented by the given fat pointer.\nReturns a reference to the extension data for the current …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUse a <code>Wake</code>-able type as a <code>Waker</code>.\nMoves the value into a <code>Poll::Ready</code> to make a <code>Poll&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUse a <code>Wake</code>-able type as a <code>RawWaker</code>.\nUse a <code>Wake</code>-able type as a <code>RawWaker</code>.\nReturns the argument unchanged.\nCreates a new <code>Waker</code> from <code>RawWaker</code>.\nCreates a new <code>Context</code> from a <code>&amp;Waker</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the <code>LocalFutureObj</code> into a <code>FutureObj</code>.\nConvert an owned instance into a (conceptually owned) fat …\nReturns <code>true</code> if the poll is a <code>Pending</code> value.\nReturns <code>true</code> if the poll is a <code>Poll::Ready</code> value.\nCheck whether spawning failed to the executor being shut …\nReturns a reference to the <code>LocalWaker</code> for the current task.\nMaps a <code>Poll&lt;T&gt;</code> to <code>Poll&lt;U&gt;</code> by applying a function to a …\nMaps a <code>Poll::Ready&lt;Result&lt;T, E&gt;&gt;</code> to …\nMaps a <code>Poll::Ready&lt;Option&lt;Result&lt;T, E&gt;&gt;&gt;</code> to …\nMaps a <code>Poll&lt;Result&lt;T, E&gt;&gt;</code> to <code>Poll&lt;Result&lt;U, E&gt;&gt;</code> by …\nMaps a <code>Poll&lt;Option&lt;Result&lt;T, E&gt;&gt;&gt;</code> to …\nCreate a <code>LocalFutureObj</code> from a custom trait object …\nCreate an <code>AtomicWaker</code>.\nCreate a <code>FutureObj</code> from a custom trait object …\nCreate a new <code>WakerRef</code> from a <code>Waker</code> reference.\nCreates a new <code>Waker</code> from the provided <code>data</code> pointer and …\nCreates a new <code>RawWaker</code> from the provided <code>data</code> pointer and …\nCreates a new <code>RawWakerVTable</code> from the provided <code>clone</code>, <code>wake</code>,\nCreate a new <code>WakerRef</code> from a <code>Waker</code> that must not be …\nReturns a reference to a <code>Waker</code> that does nothing when used.\nCreate a new <code>Waker</code> which does nothing when <code>wake()</code> is …\nGet a static reference to a <code>Waker</code> which does nothing when …\nRegisters the waker to be notified on calls to <code>wake</code>.\nSpawning failed because the executor has been shut down.\nSpawns a task that polls the given future with output <code>()</code> to\nSpawns a task that polls the given future with output <code>()</code> to\nSpawns a future that will be run to completion.\nSpawns a task that polls the given future to completion …\nSpawns a future that will be run to completion.\nSpawns a task that polls the given future to completion …\nDetermines whether the executor is able to spawn new tasks.\nDetermines whether the executor is able to spawn new tasks.\nReturns the last <code>Waker</code> passed to <code>register</code>, so that the …\nGets the <code>vtable</code> pointer used to create this <code>Waker</code>.\nIndicates that the associated task is ready to make …\nCalls <code>wake</code> on the last <code>Waker</code> passed to <code>register</code>.\nWakes up the task associated with this <code>Waker</code>.\nIndicates that the associated task is ready to make …\nWakes up the task associated with this <code>Waker</code> without …\nCreates a <code>Waker</code> from an <code>Arc&lt;impl ArcWake&gt;</code>.\nReturns a reference to the <code>Waker</code> for the current task.\nCreates a reference to a <code>Waker</code> from a reference to …\nReturns <code>true</code> if this <code>Waker</code> and another <code>Waker</code> would awake …\nListens to keyboard key presses and calls the given …\nListens to keyboard key releases and calls the given …\nCreates a new <code>Stream</code> that produces the items sent from a …\nCreates a new <code>Stream</code> that produces the items sent from a …\nA subscription event.\nA stream of runtime events.\nThe hasher used for identifying subscriptions.\nA user interacted with a user interface in a window.\nThe events that will be produced by a <code>Subscription</code> with …\nThe description of a <code>Subscription</code>.\nA request to listen to external events.\nA registry of subscription streams.\nBroadcasts an event to the subscriptions currently alive.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Subscription</code> from a <code>Recipe</code> describing it.\nHashes the <code>Recipe</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the different recipes of the <code>Subscription</code>.\nCreates a new empty <code>Tracker</code>.\nExecutes the <code>Recipe</code> and produces the stream of events of …\nUpdates the <code>Tracker</code> with the given <code>Subscription</code>.\nThe <code>Event</code> describing the interaction.\nThe <code>event::Status</code> of the interaction.\nThe window holding the interface of the interaction.\nA bevelled corner.\nThe stroke for each sub-path does not extend beyond its …\nA simple cache that stores generated geometry to avoid …\nThe style used to fill geometry.\nThe region of a surface that can be used to draw geometry.\nThe kind of <code>Frame</code> this renderer supports.\nThe kind of geometry this renderer can draw.\nA fill which linearly interpolates colors along a …\nA <code>Gradient</code> color.\nA raster image that can be drawn.\nThe shape used at the end of open subpaths when they are …\nThe dash pattern used when stroking the line.\nThe shape used at the corners of paths or basic shapes …\nA linear gradient interpolates colors along a direction …\nA sharp corner.\nAn immutable set of points that may or may not be …\nA renderer capable of drawing some <code>Self::Geometry</code>.\nAt the end of each sub-path, the shape representing the …\nA round corner.\nA solid <code>Color</code>.\nAt the end of each sub-path, the shape representing the …\nThe style of a stroke.\nThe coloring style of some drawing.\nA raster image that can be drawn.\nA bunch of text that can be drawn to a canvas\nThe border radii of the image\nThe border radius for the svg\nReturns the coordinate of the center of the <code>Frame</code>.\nCreates a new <code>Path</code> representing a circle given its center …\nClears the <code>Cache</code>, forcing a redraw the next time it is …\nThe color of the text\nThe <code>Color</code> filter to be applied to the <code>Svg</code>.\nThe contents of the text\nDraws geometry using the provided closure and stores it in …\nDraws the given <code>Self::Geometry</code>.\nDraws the given <code>Image</code> on the <code>Frame</code> inside the given bounds.\nDraws the given <code>Svg</code> on the <code>Frame</code> inside the given bounds.\nComputes the <code>Path</code>s of the <code>Text</code> and draws them using the …\nFill <code>Geometry</code> with a certain style.\nDraws the given <code>Path</code> on the <code>Frame</code> by filling it with the …\nDraws an axis-aligned rectangle given its top-left corner …\nDraws the characters of the given <code>Text</code> on the <code>Frame</code>, …\nThe filter method of the image.\nThe font of the text\nDraw and generate geometry.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe handle of the image.\nThe handle of the <code>Svg</code>.\nReturns the height of the <code>Frame</code>.\nThe horizontal alignment of the text\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurns the <code>Frame</code> into its underlying geometry.\nCreates a new <code>Path</code> representing a line segment given its …\nThe shape to be used at the end of open subpaths when they …\nThe dash pattern used when stroking the line.\nThe line height of the text.\nThe shape to be used at the corners of paths or basic …\nCreates a new <code>Frame</code> with the given dimensions.\nCreates a new empty <code>Cache</code>.\nCreates a new <code>Path</code> with the provided closure.\nCreates a new <code>Self::Frame</code>.\nThe offset of <code>LineDash::segments</code> to start the pattern.\nThe opacity of the image.\nThe opacity of the <code>Svg</code>.\nBuild different kinds of 2D shapes.\nPops a transform from the transform stack and sets it as …\nThe position of the text relative to the alignment …\nPushes the current transform in the transform stack.\nReturns the internal <code>lyon_path::Path</code>.\nCreates a new <code>Path</code> representing a rectangle given its …\nApplies a rotation in radians to the current transform of …\nThe rotation to be applied to the image; on its center.\nThe rotation to be applied to the image; on its center.\nCreates a new <code>Path</code> representing a rounded rectangle given …\nThe fill rule defines how to determine what is inside and …\nApplies a uniform scaling to the current transform of the …\nApplies a non-uniform scaling to the current transform of …\nThe alternating lengths of lines and gaps which describe …\nThe shaping strategy of the text.\nReturns the dimensions of the <code>Frame</code>.\nThe size of the text\nIf set to <code>true</code>, the image will be snapped to the pixel …\nCreate lines from a <code>Path</code> and assigns them various …\nDraws the stroke of the given <code>Path</code> on the <code>Frame</code> with the …\nDraws the stroke of an axis-aligned rectangle with the …\nThe color or gradient of the fill.\nThe color or gradient of the stroke.\nReturns the current <code>Path</code> with the given transform applied …\nApplies a translation to the current transform of the <code>Frame</code>…\nThe vertical alignment of the text\nReturns the width of the <code>Frame</code>.\nThe distance between the two edges of the stroke.\nExecutes the given drawing operations within a <code>Rectangle</code> …\nSets the color of the <code>Stroke</code>.\nCreates a new empty <code>Cache</code> with the given <code>Group</code>.\nSets the <code>LineCap</code> of the <code>Stroke</code>.\nSets the <code>LineJoin</code> of the <code>Stroke</code>.\nStores the current transform of the <code>Frame</code> and executes the …\nSets the width of the <code>Stroke</code>.\nThe style used to fill geometry.\nA <code>Gradient</code> color.\nThe fill rule defines how to determine what is inside and …\nA solid <code>Color</code>.\nThe coloring style of some drawing.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe fill rule defines how to determine what is inside and …\nThe color or gradient of the fill.\nThe internal implementation of a <code>Frame</code>.\nThe region of a surface that can be used to draw geometry.\nA segment of a differentiable curve.\nA <code>Path</code> builder.\nAn immutable set of points that may or may not be …\nBuild and draw curves.\nAdds an <code>Arc</code> to the <code>Path</code> from <code>start_angle</code> to <code>end_angle</code> in a …\nAdds a circular arc to the <code>Path</code> with the given control …\nAdds a cubic Bézier curve to the <code>Path</code> given its two …\nBuilds the <code>Path</code> of this <code>Builder</code>.\nThe center of the arc.\nAdds a circle to the <code>Path</code> given its center coordinate and …\nCloses the current sub-path in the <code>Path</code> with a straight …\nAdds an ellipse to the <code>Path</code> using a clockwise direction.\nThe end of the segment’s angle, clockwise rotation from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConnects the last point in the <code>Path</code> to the given <code>Point</code> …\nMoves the starting point of a new sub-path to the given …\nCreates a new <code>Builder</code>.\nAdds a quadratic Bézier curve to the <code>Path</code> given its …\nThe radius of the arc.\nAdds a rectangle to the <code>Path</code> given its top-left corner …\nAdds a rounded rectangle to the <code>Path</code> given its top-left …\nThe start of the segment’s angle, clockwise rotation …\nA segment of a differentiable curve.\nAn elliptical <code>Arc</code>.\nThe center of the arc.\nThe center of the arc.\nThe end of the segment’s angle, clockwise rotation from …\nThe end of the segment’s angle, clockwise rotation from …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe radii of the arc’s ellipse. The horizontal and …\nThe radius of the arc.\nThe clockwise rotation of the arc’s ellipse.\nThe start of the segment’s angle, clockwise rotation …\nThe start of the segment’s angle, clockwise rotation …\nFlag parameters for arcs as described by the SVG …\nAn alias for <code>usize</code>.\nA view over a contiguous storage of custom attributes.\nInterface for objects storing custom attributes associated …\nAn alias for a slice of <code>f32</code> values.\nA beveled corner is to be used to join path segments. The …\nThe default builder for <code>Path</code>.\nA builder for <code>Path</code> with custom attributes.\nThe stroke for each sub-path does not extend beyond its …\nID of a control point in a path.\nID of an endpoint point in a path.\nRepresents an event or edge of path.\nRefers to an event in a path.\nThe fill rule defines how to determine what is inside and …\nA path event representing endpoints and control points as …\nAn iterator of endpoint and control point ids for <code>Path</code> and …\nA view over a sequence of endpoint IDs forming a polygon.\nAn iterator for <code>Path</code> and <code>PathSlice</code>.\nAn iterator for <code>Path</code> and <code>PathSlice</code>.\nLine cap as defined by the SVG specification.\nLine join as defined by the SVG specification.\nA sharp corner is to be used to join path segments.\nSame as a miter join, but if the miter limit is exceeded, …\nAn empty attribute slice.\nA simple path data structure.\nAn object that stores multiple paths contiguously.\nA view on a <code>PathBuffer</code>.\nThe commands of a path encoded in a single array using IDs …\nA view over <code>PathCommands</code>.\nA path event representing endpoints and control points as …\nA view on a <code>Path</code>.\nA view over a sequence of endpoints forming a polygon.\nInterface for types types (typically endpoints and control …\nInterface for objects storing endpoints and control points …\nAn iterator of over a <code>Path</code> traversing the path in reverse.\nAt each end of each sub-path, the shape representing the …\nA round corner is to be used to join path segments.\nThe positive or negative side of a vector or segment.\nAt the end of each sub-path, the shape representing the …\nThe two possible orientations for the edges of a shape to …\nReturns a view on the path commands.\nReturns a view on this <code>Path</code>.\nReturns a slice over an endpoint’s custom attributes.\nReturns a slice over an endpoint’s custom attributes.\nPath building utilities.\nCreates a PathCommandsBuilder to create path commands.\nCreates a Builder to build a path.\nCreates a BuilderWithAttributes to build a path with …\nA generic representation for paths that allow more control …\nReturns the event for a given event ID.\nReturns the event for a given event ID.\nReturns the event for a given event ID.\nReturns the event for a given event ID.\nReturns an iterator over the path, with endpoints and …\nReturns the first endpoint and its custom attributes if …\nIterate on a flattened approximation of the path with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the endpoint’s custom attributes as a slice of …\nIterates over the endpoint and control point ids of the …\nIterates over the endpoint and control point ids of the …\nReturns an iterator of <code>IdEvent</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilds a <code>Path</code> from This iterator.\nReturns whether the path buffer is empty.\nReturns whether the path buffer is empty.\nReturns an iterator over the path commands.\nReturns an iterator over the path commands.\nIterates over the entire <code>Path</code>, ignoring custom attributes.\nIterates over the path.\nReturns an iterator of <code>Event&lt;&amp;T&gt;</code>.\nIterates over the entire <code>Path</code> with custom attributes.\nIterates over the entire <code>Path</code> with custom attributes.\nTools to iterate over paths.\nOf the four candidate arc sweeps, two will represent an …\nReturns the last endpoint and its custom attributes if any.\nReturns the number of paths in the path buffer.\nReturns the number of paths in the path buffer.\nf32 version of the lyon_geom types used everywhere. Most …\nCreates an Empty <code>Path</code>.\nReturns the next event id within the path.\nReturns the next event id within the path.\nReturns the next event id within the sub-path.\nReturns the next event id within the path.\nReturns the number of float attributes per endpoint.\nThe default path data structure.\nA container to store multiple paths contiguously.\nReturns an iterator of <code>PathEvent</code>.\nReturns a view on a path made of these commands with …\nSpecific path types for polygons.\nReturns a reversed version of this path in the form of an …\nReturns a reversed version of this path in the form of an …\nCreates an WithSvg to build a path with a rich set of …\nIf <code>sweep</code> is <code>true</code>, then the arc will be drawn in a “…\n<code>lyon_path</code> traits reexported here for convenience.\nApplies a transform to all endpoints and control points of …\nThe radius of each corner of a rounded rectangle.\nBuilds a path.\nA Builder that approximates curves with successions of …\nA convenience wrapper for <code>PathBuilder</code> without custom …\nThe base path building interface.\nThe type of object that is created by this builder.\nA path building interface that tries to stay close to SVG…\nBuilds a path with a transformation applied.\nImplements an SVG-like building interface on top of a …\nAdds a sub-path containing a circle.\nAdds a sub-path containing a circle.\nAdds a sub-path containing an ellipse.\nAdds a sub-path containing an ellipse.\nAdds a sub-path containing a single line segment.\nAdds a sub-path containing a single line segment.\nAdds a sub-path containing a single point.\nAdds a sub-path containing a single point.\nAdds a sub-path from a polygon.\nAdds a sub-path from a polygon.\nAdds a sub-path from a polygon.\nAdds a sub-path containing a rectangle.\nAdds a sub-path containing a rectangle.\nAdds a sub-path containing a rectangle.\nAdds a sub-path containing a rectangle.\nAdds an elliptical arc.\nStarts a new sub-path at a given position.\nStarts a new sub-path at a given position.\nBuilds a path object, consuming the builder.\nBuilds a path object, consuming the builder.\nEnds the current sub-path by connecting it back to its …\nCloses the current sub path.\nCloses the current sub path.\nAdds a cubic bézier curve to the current sub-path.\nAdds a cubic bézier segment to the current sub-path.\nAdds a cubic bézier curve to the current sub-path.\nEnds the current sub path.\nEnds the current sub path.\nReturns a builder that approximates all curves with …\nReturns a builder that approximates all curves with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdds an horizontal line segment.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdds a line segment to the current sub-path.\nAdds a line segment to the current sub-path.\nAdds a line segment to the current sub-path.\nStart a new sub-path at the given position.\nApplies the provided path event.\nApplies the provided path event.\nAdds a quadratic bézier curve to the current sub-path.\nAdds a quadratic bézier segment to the current sub-path.\nAdds a quadratic bézier curve to the current sub-path.\nEquivalent to <code>arc_to</code> in relative coordinates.\nEquivalent to <code>cubic_bezier_to</code> in relative coordinates.\nAdds an horizontal line segment in relative coordinates.\nEquivalent to <code>line_to</code> in relative coordinates.\nEquivalent to <code>move_to</code> in relative coordinates.\nEquivalent to <code>quadratic_bezier_to</code> in relative coordinates.\nAdds a vertical line segment in relative coordinates.\nHints at the builder that a certain number of endpoints …\nHints at the builder that a certain number of endpoints …\nHints at the builder that a certain number of endpoints …\nEquivalent to <code>cubic_bezier_to</code> with implicit first control …\nEquivalent to <code>quadratic_bezier_to</code> with implicit control …\nEquivalent to <code>smooth_cubic_bezier_to</code> in relative …\nEquivalent to <code>smooth_quadratic_bezier_to</code> in relative …\nReturns a builder that applies the given transformation to …\nReturns a builder that applies the given transformation to …\nAdds a vertical line segment.\nReturns a builder that support SVG commands.\nReturns a builder that support SVG commands.\nA view on a <code>PathCommands</code> buffer and two slices for …\nAn iterator of <code>Event&lt;&amp;Endpoint, &amp;ControlPoint&gt;</code>.\nAn iterator of <code>Event&lt;&amp;Endpoint, &amp;ControlPoint&gt;</code>.\nThe commands of a path encoded in a single array using IDs …\nBuilds path commands.\nA view over <code>PathCommands</code>.\nAn iterator of <code>PathEvent</code>.\nConsumes the builder and returns path commands.\nReturns an iterator over the events of the path using …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the events of the path using IDs.\nCreates a builder without allocating memory.\nCreates a pre-allocated builder.\nAn angle in radians\nAn elliptic arc curve segment.\nFlag parameters for arcs as described by the SVG …\nA 2d curve segment defined by four points: the beginning …\nAn infinite line defined by a point and a vector.\nA line defined by the equation …\nA linear segment.\nA 2d curve segment defined by three points: the beginning …\nAlias for <code>euclid::default::Rotation2D</code>\nCommon APIs to segment types.\nAn elliptic arc curve segment using the SVG’s end-point …\nAlias for <code>euclid::default::Transform2D</code>\nAlias for <code>euclid::default::Translation2D</code>\nA 2D triangle defined by three points <code>a</code>, <code>b</code> and <code>c</code>.\nReturn the curve after the split point.\nReturn the curve after the split point.\nReturn the curve after the split point.\nReturn the segment after the split point.\nReturn the curve after the split point.\nAngle in radians\nReturns the shortest signed angle between two angles.\nCompute the length of the segment using a flattened …\nCompute the length of the segment using a flattened …\nElliptic arc related maths and tools.\nReturn the curve before the split point.\nReturn the curve before the split point.\nReturn the curve before the split point.\nReturn the segment before the split point.\nReturn the curve before the split point.\nReturns a conservative rectangle that contains the curve.\nReturns a conservative rectangle that contains the curve.\nReturn the smallest rectangle containing this segment.\nReturns the smallest rectangle the curve is contained in\nReturns the smallest rectangle that contains this triangle.\nReturns the smallest range of x that contains this curve.\nReturns the smallest range of x that contains this curve.\nReturns a conservative range of x that contains this …\nReturns the smallest range of y that contains this curve.\nReturns the smallest range of y that contains this curve.\nReturns a conservative range of y that contains this …\nReturns a triangle containing this curve segment.\nCast from one numeric representation to another.\nCreate simple circle.\nClip this segment against a rectangle.\nHorizontally clip this segment against a range of the x …\nVertically clip this segment against a range of the y axis.\nComputes the closest point on this segment to <code>p</code>.\nAnalytic solution to finding the closest point on the …\nComputes the intersection points (if any) between this …\nComputes the intersections (if any) between this segment …\nSample the derivative at t (expecting t between 0 and 1).\nSample the curve’s derivative at t (expecting t between …\nSample the curve’s derivative at t (expecting t between …\nComputes the distance between this segment and a point.\nReturns the shortest distance between this segment and a …\nSample x derivative at t (expecting t between 0 and 1).\nSample the x coordinate of the curve’s derivative at t …\nSample the x coordinate of the curve’s derivative at t …\nSample y derivative at t (expecting t between 0 and 1).\nSample the y coordinate of the curve’s derivative at t …\nSample the y coordinate of the curve’s derivative at t …\nEpsilon constants are usually not a good way to deal with …\nReturns a conservative rectangle that contains the curve.\nReturns a conservative rectangle the curve is contained in.\nReturns a conservative rectangle that contains the curve.\nReturns a conservative range of x that contains this curve.\nReturns a conservative range of x that contains this curve.\nReturns a conservative range of y that contains this curve.\nReturns a conservative range of y that contains this curve.\nComputes a “fat line” of this segment.\nComputes a “fat line” of this segment.\nReturns the flattened representation of the curve as an …\nReturns the flattened representation of the curve as an …\nReturns the flattened representation of the curve as an …\nReturns the flattened representation of the curve as an …\nFind the interval of the beginning of the curve that can …\nSwap the direction of the segment.\nSwap the direction of the segment.\nSwap the beginning and the end of the segment.\nReturns an inverted version of this segment where the …\nSwap the beginning and the end of the segment.\nApproximate the arc with a sequence of cubic bézier …\nApproximates the arc with a sequence of cubic bézier …\nApproximates the curve with sequence of line segments.\nApproximates the curve with sequence of line segments.\nApproximates the curve with sequence of line segments.\nApproximates the curve with sequence of line segments.\nApproximates the curve with sequence of line segments.\nApproximates the curve with sequence of line segments.\nApproximates the curve with sequence of line segments.\nApproximates the curve with sequence of line segments.\nCompute a flattened approximation of the curve, invoking a …\nInvokes a callback at each inflection point if any.\nReturn local x extrema or None if this curve is monotonic.\nReturn local y extrema or None if this curve is monotonic.\nInvokes a callback for each monotonic part of the segment.\nInvokes a callback for each monotonic part of the segment.\nInvokes a callback for each monotonic part of the segment.\nInvokes a callback for each monotonic part of the segment.\nApproximate the arc with a sequence of quadratic bézier …\nApproximates the arc with a sequence of quadratic bézier …\nApproximates the cubic bézier curve with sequence of …\nApproximate the arc with a sequence of quadratic bézier …\nApproximates the arc with a sequence of quadratic bézier …\nApproximates the cubic bézier curve with sequence of …\nInvokes a callback for each x-monotonic part of the …\nInvokes a callback for each x-monotonic part of the …\nInvokes a callback for each x-monotonic part of the …\nInvokes a callback for each x-monotonic part of the …\nInvokes a callback for each y-monotonic part of the …\nInvokes a callback for each y-monotonic part of the …\nInvokes a callback for each y-monotonic part of the …\nInvokes a callback for each y-monotonic part of the …\nStart of the curve.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from the SVG arc notation.\nSample the curve’s angle at t (expecting t between 0 and …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nComputes the intersection (if any) between this segment …\nTest for triangle-triangle intersection.\nTest for triangle-segment intersection.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the curve can be approximated with a …\nReturns <code>true</code> if the angle is a finite number.\nReturns true if the curve can be approximated with a …\nReturns true if the curve can be approximated with a …\nReturns whether this segment is fully monotonic.\nReturns whether this segment is fully monotonic.\nReturns true if the curve can be safely approximated with …\nPer SVG spec, this arc should be rendered as a line_to …\nReturns whether this segment is monotonic on the x axis.\nReturns whether this segment is monotonic on the x axis.\nReturns whether this segment is monotonic on the y axis.\nReturns whether this segment is monotonic on the y axis.\nOf the four candidate arc sweeps, two will represent an …\nComputes the length of this segment.\nComputes the length of this segment.\nLinear interpolation between two angles, using the …\nComputes the intersection points (if any) between this …\nComputes the intersection points (if any) between this …\nComputes the intersections (if any) between this segment …\nComputes the intersections (if any) between this segment a …\nComputes the intersection points (if any) between this …\nComputes the intersections (if any) between this segment …\nComputes the intersections (if any) between this segment …\nReturn the x inflection point or None if this curve is …\nReturn the y inflection point or None if this curve is …\nComputes third mid-point of this segment.\nComputes the number of quadratic bézier segments required …\nShorthand for <code>Point::new(x, y)</code>.\nReturns this angle in the [0..2*PI[ range.\nComputes the intersection points (if any) between this …\nComputes the intersections (if any) between this segment a …\nSample the curve at t (expecting t between 0 and 1).\nSample the curve at t (expecting t between 0 and 1).\nSample the curve at t (expecting t between 0 and 1).\nSample the segment at t (expecting t between 0 and 1).\nSample the curve at t (expecting t between 0 and 1).\nSample the curve’s tangent at t (expecting t between 0 …\nChanges the segment’s length, moving destination point.\nReturns this angle in the ]-PI..PI] range.\nReturns <code>(sin(self), cos(self))</code>.\nShorthand for <code>Size::new(x, y)</code>.\nReturn the parameter values corresponding to a given x …\nReturn the parameter values corresponding to a given y …\nSplit this curve into two sub-curves.\nSplit this curve into two sub-curves.\nSplit this curve into two sub-curves.\nSplit this curve into two sub-segments.\nSplit this curve into two sub-curves.\nReturn the curve inside a given range of t.\nReturn the sub-curve inside a given range of t.\nReturn the sub-curve inside a given range of t.\nReturn the sub-segment inside a given range of t.\nReturn the sub-curve inside a given range of t.\nComputes the squared distance between this segment and a …\nReturned the squared distance to a point.\nReturns the shortest squared distance between this segment …\nComputes the squared length of this segment.\nIf <code>sweep</code> is <code>true</code>, then the arc will be drawn in a “…\nEnd of the curve.\nConverts this arc from endpoints to center notation.\nElevate this curve to a third order bézier.\nCast angle to <code>f32</code>.\nCast angle <code>f64</code>.\nReturns the line containing this segment.\nApproximate the curve with a single quadratic bézier …\nEvaluates an upper bound on the maximum distance between …\nConvert to the SVG arc notation.\nReturns the vector between this segment’s <code>from</code> and <code>to</code> …\n[Not implemented] Applies the transform to this triangle …\nApplies the transform to this curve and returns the …\nApplies the transform to this segment and returns the …\nApplies the transform to this curve and returns the …\nFallible cast from one numeric representation to another.\nShorthand for <code>Vector::new(x, y)</code>.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nSample x at t (expecting t between 0 and 1).\nSample the x coordinate of the curve at t (expecting t …\nSample the x coordinate of the segment at t (expecting t …\nSample the x coordinate of the curve at t (expecting t …\nThe <code>x</code> (traditionally, horizontal) coordinate.\nFind the advancement of the x-most position in the curve.\nFind the advancement of the x-most position in the curve.\nFind the x-least position in the curve.\nFind the advancement of the x-least position in the curve.\nSample y at t (expecting t between 0 and 1).\nSample the y coordinate of the curve at t (expecting t …\nSample the y coordinate of the segment at t (expecting t …\nSample the y coordinate of the curve at t (expecting t …\nThe <code>y</code> (traditionally, vertical) coordinate.\nFind the advancement of the y-most position in the curve.\nFind the advancement of the y-most position in the curve.\nFind the advancement of the y-least position in the curve.\nFind the advancement of the y-least position in the curve.\nAn elliptic arc curve segment.\nFlag parameters for arcs as described by the SVG …\nFlattening iterator for arcs.\nAn elliptic arc curve segment using the SVG’s end-point …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOf the four candidate arc sweeps, two will represent an …\nIf <code>sweep</code> is <code>true</code>, then the arc will be drawn in a “…\nA string with a fixed capacity.\nA vector with a fixed capacity.\nError value indicating insufficient capacity\nA draining iterator for <code>ArrayVec</code>.\nBy-value iterator for <code>ArrayVec</code>.\nReturn a raw mutable pointer to the vector’s buffer.\nReturn a raw mutable pointer to the string’s buffer.\nReturn a mutable slice containing all elements of the …\nReturns the remaining items of this iterator as a mutable …\nReturn a mutable string slice of the whole <code>ArrayString</code>.\nReturn a raw pointer to the vector’s buffer.\nReturn a raw pointer to the string’s buffer.\nReturn a slice containing all elements of the vector.\nReturns the remaining items of this iterator as a slice.\nReturn a string slice of the whole <code>ArrayString</code>.\nReturn the capacity of the <code>ArrayVec</code>.\nReturn the capacity of the <code>ArrayString</code>.\nRemove all elements in the vector.\nMake the string empty.\nReturn an empty array\nReturn an empty <code>ArrayString</code>\nCreate a draining iterator that removes the specified …\nExtract the overflowing element\nExtend the <code>ArrayVec</code> with an iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>ArrayString</code> from a <code>str</code>.\nReturns the argument unchanged.\nCreate a new <code>ArrayString</code> from a byte string literal.\nCreate an <code>ArrayVec</code> from an iterator.\nInsert <code>element</code> at position <code>index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the inner fixed size array, if it is full to its …\nReturn the inner fixed size array.\nReturns whether the <code>ArrayVec</code> is empty.\nReturns whether the string is empty.\nReturn true if the <code>ArrayVec</code> is completely filled to its …\nReturn if the <code>ArrayString</code> is completely filled.\nReturn the number of elements in the <code>ArrayVec</code>.\nReturn the length of the string.\nCreate a new empty <code>ArrayVec</code>.\nCreate a new empty <code>ArrayString</code>.\nCreate a new <code>CapacityError</code> from <code>element</code>.\nCreate a new empty <code>ArrayVec</code> (const fn).\nCreate a new empty <code>ArrayString</code> (const fn).\nRemove the last element in the vector and return it.\nRemoves the last character from the string and returns it.\nRemove the element at <code>index</code> and shift down the following …\nPush <code>element</code> to the end of the vector.\nAdds the given char to the end of the string.\nAdds the given string slice to the end of the string.\nPush <code>element</code> to the end of the vector without checking the …\nReturns the capacity left in the <code>ArrayVec</code>.\nReturns the capacity left in the <code>ArrayString</code>.\nRemove the element at <code>index</code> and shift down the following …\nRemoves a <code>char</code> from this <code>ArrayString</code> at a byte position …\nRetains only the elements specified by the predicate.\nSet the vector’s length without dropping or moving out …\nSet the strings’s length.\nConvert into a <code>CapacityError</code> that does not carry an …\nRemove the element at <code>index</code> and swap the last element into …\nRemove the element at <code>index</code> and swap the last element into …\nReturns the ArrayVec, replacing the original with a new …\nShortens the vector, keeping the first <code>len</code> elements and …\nShortens this <code>ArrayString</code> to the specified length.\nCopy all elements from the slice and append to the <code>ArrayVec</code>…\nInsert <code>element</code> at position <code>index</code>.\nPush <code>element</code> to the end of the vector.\nAdds the given char to the end of the string.\nAdds the given string slice to the end of the string.\nCreate a new <code>ArrayString</code> value fully filled with ASCII …\nA 2d curve segment defined by four points: the beginning …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn angle in radians\nA 2d vector of booleans, useful for component-wise logic …\nA 3d vector of booleans, useful for component-wise logic …\nA 2d axis aligned rectangle represented by its minimum and …\nAn axis aligned 3D box represented by its minimum and …\nHomogeneous vector in 3D space.\nA one-dimensional distance, with value represented by <code>T</code> …\nA 2d Point tagged with a unit.\nA 3d Point tagged with a unit.\nA 2d Rectangle optionally tagged with a unit.\nA rigid transformation. All lengths are preserved under …\nA transform that can represent rotations in 2d, …\nA transform that can represent rotations in 3d, …\nA scaling factor between two different units of …\nA group of 2D side offsets, which correspond to …\nA 2d size tagged with a unit.\nA 3d size tagged with a unit.\nA 2d transform represented by a column-major 3 by 3 …\nA 3d transform stored as a column-major 4 by 4 matrix.\nA 2d transformation from a space to another that can only …\nA 3d transformation from a space to another that can only …\nTrait for basic trigonometry functions, so they can be …\nThe default unit.\nA 2d Vector tagged with a unit.\nA 3d Vector tagged with a unit.\nComputes the absolute value of each component.\nComputes the absolute value of each component.\nComputes the vector with absolute values of each component.\nComputes the vector with absolute values of each component.\nReturns <code>true</code> if all components are <code>true</code> and <code>false</code> …\nReturns <code>true</code> if all components are <code>true</code> and <code>false</code> …\nReturns new vector with by-component AND operation applied.\nReturns new vector with by-component AND operation applied.\nAngle in radians\nReturns the signed angle between this vector and the x …\nReturns the signed angle between this vector and another …\nReturns the positive angle between this vector and another …\nReturns <code>true</code> if any component are <code>true</code> and <code>false</code> otherwise.\nReturns <code>true</code> if any component are <code>true</code> and <code>false</code> otherwise.\nReturns <code>true</code> if this transform is approximately equal to …\nReturns <code>true</code> if this transform is approximately equal to …\nReturns <code>true</code> if this transform is approximately equal to …\nReturns <code>true</code> if this transform is approximately equal to …\nReturns <code>true</code> if this transform is approximately equal to …\nUtilities for testing approximate ordering - especially …\nReturns result of multiplication of both components\nCreates a rotation around a given axis.\nCreates a rotation around the x axis.\nCreates a rotation around the y axis.\nCreates a rotation around the z axis.\nShorthand for …\nShorthand for <code>BoolVector2D { x, y }</code>.\nShorthand for <code>BoolVector3D { x, y, z }</code>.\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast the unit\nCast the unit\nCast the unit\nCast the unit, preserving the numeric value.\nCast the unit, preserving the numeric value.\nCast the unit\nCast the unit, preserving the numeric value.\nCast the unit, preserving the numeric value.\nCast the unit\nCast the unit\nCast the unit.\nCast the unit.\nRounds each component to the smallest integer equal or …\nSee <code>Point2D::ceil</code>.\nRounds each component to the smallest integer equal or …\nSee <code>Point3D::ceil</code>.\nRounds each component to the smallest integer equal or …\nSee <code>Size2D::ceil</code>.\nRounds each component to the smallest integer equal or …\nSee <code>Size3D::ceil</code>.\nRounds each component to the smallest integer equal or …\nSee <code>Vector2D::ceil</code>.\nRounds each component to the smallest integer equal or …\nSee <code>Vector3D::ceil</code>.\nReturns the point each component of which clamped by …\nReturns the point each component of which clamped by …\nReturns the point each component of which clamped by …\nReturns the size each component of which clamped by …\nReturns the size each component of which clamped by …\nReturns the vector each component of which is clamped by …\nReturns the vector each component of which is clamped by …\nReturn this vector with minimum and maximum lengths …\nReturn this vector with minimum and maximum lengths …\nReturns the component-wise division of the two vectors.\nReturns the component-wise division of the two vectors.\nReturns the component-wise multiplication of the two …\nReturns the component-wise multiplication of the two …\nReturns <code>true</code> if this box2d contains the point <code>p</code>. A point …\nReturns <code>true</code> if this box3d contains the point <code>p</code>. A point …\nReturns <code>true</code> if this rectangle contains the point. Points …\nReturns <code>true</code> if this box contains the interior of the …\nReturns <code>true</code> if this box3d contains the interior of the …\nReturns <code>true</code> if this box contains the point <code>p</code>. A point is …\nReturns <code>true</code> if this box3d contains the point <code>p</code>. A point …\nReturns <code>true</code> if this rectangle contains the interior of …\nReturns the norm of the cross product [self.x, self.y, 0] …\nCross product.\nDecompose this into a translation and an rotation to be …\nA set of aliases for all types, tagged with the default …\nReturns the identity transform.\nReturns the identity transform.\nThe extent of the element in the <code>U</code> units along the <code>z</code> axis.\nComputes and returns the determinant of this transform.\nCompute the determinant of the transform.\nCalculates Euclidean division, the matching method for …\nCalculates Euclidean division, the matching method for …\nDot product.\nDot product.\nReturns vector with results of “equal” operation on …\nReturns vector with results of “equal” operation on …\nReturns vector with results of “equal” operation on …\nReturns vector with results of “equal” operation on …\nCreates a rotation from Euler angles.\nCreate a 3d point from this one, using the specified z …\nCreate a 3d vector from this one, using the specified z …\nSee <code>Point2D::floor</code>.\nRounds each component to the biggest integer equal or …\nSee <code>Point3D::floor</code>.\nRounds each component to the biggest integer equal or …\nSee <code>Size2D::floor</code>.\nRounds each component to the biggest integer equal or …\nRounds each component to the biggest integer equal or …\nSee <code>Size3D::floor</code>.\nRounds each component to the biggest integer equal or …\nSee <code>Vector2D::floor</code>.\nRounds each component to the biggest integer equal or …\nSee <code>Vector3D::floor</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructor taking angle and length\nCreate a transform providing its components via an array …\nCreate a transform providing its components via an array …\nEquivalent to <code>from_array</code> with elements packed two at a time\nEquivalent to <code>from_array</code> with elements packed four at a …\nConstructor setting the same value to all sides, taking a …\nConstructor taking properly Lengths instead of scalar …\nConstructor taking properly Lengths instead of scalar …\nConstructor taking a typed Length for each side.\nConstructor taking scalar strongly typed lengths.\nConstructor taking scalar strongly typed lengths.\nConstructor taking properly  Lengths instead of scalar …\nConstructor taking properly  Lengths instead of scalar …\nConstructor.\nConstructor.\nReturns the smallest box containing all of the provided …\nReturns the smallest box containing all of the provided …\nReturns the smallest rectangle defined by the …\nConvenience function to create a scale transform from a …\nCreates a <code>Box2D</code> of the given size, at offset zero.\nCreates a <code>Box3D</code> of the given size, at offset zero.\nCreates a rect of the given size, at offset zero.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unit-less value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nConstruct side offsets from min and a max vector offsets.\nConstruct side offsets from min and a max vector offsets.\nUnpack the underlying value from the wrapper.\nReturns the underlying scalar scale factor.\nReturns self.angle as a strongly typed <code>Angle&lt;T&gt;</code>.\nReturns vector with results of “greater then” …\nReturns vector with results of “greater than” …\nReturns vector with results of “greater than” …\nReturns vector with results of “greater than” …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis.\nComponent multiplied by the imaginary number <code>i</code>.\nConstruct an identity transform\nCreates the identity rotation.\nCreates the identity rotation.\nCreates an identity scale (1.0).\nCreates no-op translation (both <code>x</code> and <code>y</code> is <code>zero()</code>).\nCreates no-op translation (<code>x</code>, <code>y</code> and <code>z</code> is <code>zero()</code>).\nCreate an identity matrix:\nCreates an identity matrix:\nInflates the box by the specified sizes on each side …\nInflates the box by the specified sizes on each side …\nCalculate the size and position of an inner box.\nCalculate the size and position of an inner rectangle.\nComputes the intersection of two boxes, returning <code>None</code> if …\nComputes the intersection of two boxes without check …\nReturns <code>true</code> if the two boxes intersect.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts the transformation\nReturns the inverse of this rotation.\nReturns the inverse of this rotation.\nThe inverse Scale (1.0 / self).\nReturn the inverse transformation.\nReturn the inverse transformation.\nReturns the inverse transform if possible.\nReturns the inverse transform if possible.\nReturns <code>true</code> if this transform can be represented with a …\nCheck whether shapes on the XY plane with Z pointing …\nReturns <code>true</code> if the size is zero, negative or NaN.\nReturns <code>true</code> if the size is zero, negative or NaN.\nReturns <code>true</code> if any component of size is zero, negative, …\nReturns <code>true</code> if any component of size is zero, negative or …\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if this scale has no effect.\nCheck if translation does nothing (both x and y is <code>zero()</code>).\nCheck if translation does nothing (<code>x</code>, <code>y</code> and <code>z</code> is <code>zero()</code>).\nReturns whether it is possible to compute the inverse …\nReturns whether it is possible to compute the inverse …\nReturns <code>true</code> if the box has a negative area.\nReturns <code>true</code> if the box has a negative volume.\nReturns <code>true</code> if norm of this quaternion is (approximately) …\nReturns <code>true</code> if both components is positive and <code>false</code> any …\nReturns <code>true</code> if all components is positive and <code>false</code> any …\nReturns <code>true</code> if all side offsets are zero.\nComponent multiplied by the imaginary number <code>j</code>.\nComponent multiplied by the imaginary number <code>k</code>.\nReturns the vector length.\nReturns the vector length.\nLinearly interpolate between this box and another box.\nLinearly interpolate between this box3d and another box3d.\nLinearly interpolate between this length and another …\nLinearly interpolate between this point and another point.\nLinearly interpolate between this point and another point.\nLinearly interpolate between this rectangle and another …\nBasic Linear interpolation between this rotation and …\nLinearly interpolate each component between this size and …\nLinearly interpolate between this size and another size.\nLinearly interpolate each component between this vector …\nLinearly interpolate each component between this vector …\nReturns vector with results of “lower then” operation …\nReturns vector with results of “lower than” operation …\nReturns vector with results of “lower than” operation …\nReturns vector with results of “lower than” operation …\nApply the function <code>f</code> to each component of this point.\nApply the function <code>f</code> to each component of this point.\nApply the function <code>f</code> to each component of this vector.\nApply the function <code>f</code> to each component of this vector.\nReturns maximum between this length and another length.\nReturns the size each component of which are maximum of …\nReturns the size each component of which are maximum of …\nReturns the vector each component of which are maximum of …\nReturns the vector each component of which are maximum of …\nReturns minimum between this length and another length.\nReturns the size each component of which are minimum of …\nReturns the size each component of which are minimum of …\nReturns the vector each component of which are minimum of …\nReturns the vector each component of which are minimum of …\nMultiplies all of the transform’s component by a scalar …\nConstructor.\nConstructor.\nConstructor taking scalar values directly.\nAssociate a value with a unit of measure.\nConstructor taking scalar values directly.\nConstructor taking scalar values directly.\nConstructor.\nConstruct a new rigid transformation, where the <code>rotation</code> …\nCreates a rotation from an angle in radians.\nConstructor taking a scalar for each side.\nConstructor taking scalar values.\nConstructor taking scalar values.\nConstructor taking scalar values directly.\nConstructor taking scalar values directly.\nCreate a transform specifying its components in using the …\nCreate a transform specifying all of it’s component as a …\nCreate a transform representing a 2d transformation from …\nConstructor setting the same value to all sides, taking a …\nConstruct a new rigid transformation, where the <code>translation</code>…\nReturns <code>true</code> if all components are <code>false</code> and <code>false</code> …\nReturns <code>true</code> if all components are <code>false</code> and <code>false</code> …\nComputes the norm of this quaternion.\nReturns a unit quaternion from this one.\nReturns the vector with length of one unit.\nReturns the vector with length of one unit\nReturns new vector with results of negation operation on …\nReturns new vector with results of negation operation on …\nReturns vector with results of “not equal” operation …\nReturns vector with results of “not equal” operation …\nReturns vector with results of “not equal” operation …\nReturns vector with results of “not equal” operation …\nA one-dimensional length, tagged with its units.\nConstructor, setting all components to one.\nConstructor, setting all components to one.\nReturns new vector with by-component OR operation applied.\nReturns new vector with by-component OR operation applied.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nCreate an orthogonal projection transform.\nCalculate the b and position of an outer box.\nCalculate the size and position of an outer rectangle.\nReturns a box that encompasses the result of transforming …\nReturns a 2d box that encompasses the result of …\nReturns a 3d box that encompasses the result of …\nReturns a rectangle that encompasses the result of …\nReturns a rectangle that encompasses the result of …\nCreate a simple perspective transform, projecting to the …\nShorthand for <code>Point2D::new(x, y)</code>.\nShorthand for <code>Point3D::new(x, y)</code>.\nApplies a rotation before self’s transformation and …\nReturns a transform with a rotation applied before self’…\nApplies a scale before self’s transformation and returns …\nReturns a transform with a scale applied before self’s …\nApplies a translation before self’s transformation and …\nReturns a transform with a translation applied before self…\nReturns this vector projected onto another one.\nReturns this vector projected onto another one.\nReturns a projection of this transform in 2d space.\nCreates a rotation around from a quaternion representation.\nThe real part.\nCreates a rotation from an angle in radians.\nShorthand for …\nReturns a reflection vector using an incident ray and a …\nReturns a reflection vector using an incident ray and a …\nCalculates the least nonnegative remainder of …\nCalculates the least nonnegative remainder of …\nReturn the normalized vector even if the length is larger …\nReturn the normalized vector even if the length is larger …\nReturns a rotation transform.\nCreate a 3d rotation transform from an angle / axis. The …\nReturn a box with edges rounded to integer coordinates, …\nReturn a box3d with edges rounded to integer coordinates, …\nRounds each component to the nearest integer value.\nSee <code>Point2D::round</code>.\nRounds each component to the nearest integer value.\nSee <code>Point3D::round</code>.\nReturn a rectangle with edges rounded to integer …\nSee <code>Size2D::round</code>.\nRounds each component to the nearest integer value.\nSee <code>Size3D::round</code>.\nRounds each component to the nearest integer value.\nSee <code>Vector2D::round</code>.\nRounds each component to the nearest integer value.\nSee <code>Vector3D::round</code>.\nRounds each component to the nearest integer value.\nReturn a box with faces/edges rounded to integer …\nReturn a box3d with faces/edges rounded to integer …\nReturn a rectangle with edges rounded to integer …\nReturn a box with faces/edges rounded to integer …\nReturn a box3d with faces/edges rounded to integer …\nReturn a rectangle with edges rounded to integer …\nCreate a 2d scale transform:\nCreate a 3d scale transform:\nReturns point, each component of which or from <code>a</code>, or from <code>b</code>…\nReturns point, each component of which or from <code>a</code>, or from <code>b</code>…\nReturns size, each component of which or from <code>a</code>, or from <code>b</code> …\nReturns size, each component of which or from <code>a</code>, or from <code>b</code> …\nReturns vector, each component of which or from <code>a</code>, or from …\nReturns vector, each component of which or from <code>a</code>, or from …\nChange the size of the box by adjusting the max endpoint …\nShorthand for <code>Size2D::new(w, h)</code>.\nShorthand for <code>Size3D::new(w, h, d)</code>.\nCreate a 2d skew transform.\nSpherical linear interpolation between this rotation and …\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nReturns the vector’s length squared.\nReturns the vector’s length squared.\nComputes the squared norm of this quaternion.\nReturns the multiplication of the two transforms such that …\nReturns a rotation representing the other rotation …\nReturns a rotation representing this rotation followed by …\nReturns the multiplication of the two matrices such that …\nReturns the multiplication of the two matrices such that …\nApplies a rotation after self’s transformation and …\nReturns a transform with a rotation applied after self’s …\nApplies a scale after self’s transformation and returns …\nReturns a transform with a scale applied after self’s …\nApplies a translation after self’s transformation and …\nReturns a transform with a translation applied after self…\nConvert into a 2d point.\nConvert into a 2d vector.\nCreate a 2D transform picking the relevant terms from this …\nConvert into a 3d point with z-coordinate equals to zero.\nCreates a 3d rotation (around the z axis) from this 2d …\nConvert into a 3d vector with <code>z</code> coordinate equals to …\nCreate a 3D transform from the current transform\nCast into an array with x and y.\nCast into an array with x, y and z.\nReturn this size as an array of two elements (width, then …\nReturn this size as an array of three elements (width, …\nCast into an array with x and y.\nCast into an array with x, y and z.\nCast into an array with x and y.\nCast into an array with x, y and z.\nReturns an array containing this transform’s terms.\nReturns an array containing this transform’s terms.\nCast into an array with x, y, z and 0.\nReturns an array containing this transform’s terms …\nReturns an array containing this transform’s terms …\nEquivalent to <code>to_array</code> with elements packed two at a time …\nEquivalent to <code>to_array</code> with elements packed four at a time …\nEquivalent to <code>to_array_transposed</code> with elements packed …\nCast into an <code>f32</code> box.\nCast into an <code>f32</code> box3d.\nCast into an <code>f32</code> point.\nCast into an <code>f32</code> point.\nCast into an <code>f32</code> rectangle.\nCast into an <code>f32</code> size.\nCast into an <code>f32</code> size.\nCast into an <code>f32</code> vector.\nCast into an <code>f32</code> vector.\nCast into an <code>f32</code> vector.\nCast into an <code>f32</code> vector.\nCast into an <code>f64</code> box.\nCast into an <code>f64</code> box3d.\nCast into an <code>f64</code> point.\nCast into an <code>f64</code> point.\nCast into an <code>f64</code> rectangle.\nCast into an <code>f64</code> size.\nCast into an <code>f64</code> size.\nCast into an <code>f64</code> vector.\nCast into an <code>f64</code> vector.\nCast into an <code>f64</code> vector.\nCast into an <code>f64</code> vector.\nCast into an <code>i32</code> box, truncating decimals if any.\nCast into an <code>i32</code> box3d, truncating decimals if any.\nCast into an <code>i32</code> point, truncating decimals if any.\nCast into an <code>i32</code> point, truncating decimals if any.\nCast into an <code>i32</code> rectangle, truncating decimals if any.\nCast into an <code>i32</code> size, truncating decimals if any.\nCast into an <code>i32</code> size, truncating decimals if any.\nCast into an i32 vector, truncating decimals if any.\nCast into an i32 vector, truncating decimals if any.\nCast into an i32 vector, truncating decimals if any.\nCast into an <code>i32</code> vector, truncating decimals if any.\nCast into an <code>i64</code> box, truncating decimals if any.\nCast into an <code>i64</code> box3d, truncating decimals if any.\nCast into an <code>i64</code> point, truncating decimals if any.\nCast into an <code>i64</code> point, truncating decimals if any.\nCast into an <code>i64</code> rectangle, truncating decimals if any.\nCast into an <code>i64</code> size, truncating decimals if any.\nCast into an <code>i64</code> size, truncating decimals if any.\nCast into an i64 vector, truncating decimals if any.\nCast into an i64 vector, truncating decimals if any.\nCast into an i64 vector, truncating decimals if any.\nCast into an <code>i64</code> vector, truncating decimals if any.\nCast this vector into a point.\nCast this vector into a point.\nConvert into Cartesian 2D point.\nConvert into Cartesian 3D point.\nCast this vector into a size.\nReturns the matrix representation of this rotation.\nReturns the matrix representation of this rotation.\nReturns the matrix representation of this translation.\nReturns the matrix representation of this translation.\nCreates translation by this vector in vector units.\nCreates translation by this vector in vector units\nCast into a tuple with x and y.\nCast into a tuple with x, y and z.\nReturn this size as a tuple of two elements (width, then …\nReturn this size as an array of three elements (width, …\nCast into a tuple with x and y.\nCast into a tuple with x, y and z.\nCast into a tuple with x and y.\nCast into a tuple with x, y and z.\nCast into a tuple with x, y, z and 0.\nCast into an <code>u32</code> box, truncating decimals if any.\nCast into an <code>u32</code> box3d, truncating decimals if any.\nCast into an <code>u32</code> point, truncating decimals if any.\nCast into an <code>u32</code> point, truncating decimals if any.\nCast into an <code>u32</code> rectangle, truncating decimals if any.\nCast into an <code>u32</code> size, truncating decimals if any.\nCast into an <code>u32</code> size, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u64</code> rectangle, truncating decimals if any.\nCast into an <code>u64</code> size, truncating decimals if any.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nCast into an <code>usize</code> box, truncating decimals if any.\nCast into an <code>usize</code> box3d, truncating decimals if any.\nCast into an <code>usize</code> point, truncating decimals if any.\nCast into an <code>usize</code> point, truncating decimals if any.\nCast into an <code>usize</code> rectangle, truncating decimals if any.\nCast into an <code>uint</code> size, truncating decimals if any.\nCast into an <code>uint</code> size, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast this point into a vector.\nCast this point into a vector.\nReturn this size as a vector with width and height.\nReturn this size as a vector with width, height and depth.\nCast into a 2D vector.\nCast into a 3D vector.\nTranslate a 2D box and cast its unit.\nReturns the given box transformed by this scale.\nTranslate a 2D box and cast its unit.\nReturns the given box transformed by this scale.\nTranslate a 3D box and cast its unit.\nReturns the given 2d point transformed by this rotation.\nReturns the given point transformed by this scale.\nTranslate a point and cast its unit.\nReturns the given point transformed by this transform.\nReturns the given 2d point transformed by this rotation …\nTranslate a point and cast its unit.\nReturns the given 2d point transformed by this transform, …\nReturns the homogeneous vector corresponding to the …\nReturns the given 3d point transformed by this rotation.\nReturns the given point transformed by this scale.\nTranslate a point and cast its unit.\nReturns the given 3d point transformed by this transform, …\nReturns the homogeneous vector corresponding to the …\nReturns the given rect transformed by this scale.\nTranslate a rectangle and cast its unit.\nTranslate a rectangle and cast its unit.\nReturns the given size transformed by this scale.\nNo-op, just cast the unit.\nNo-op, just cast the unit.\nReturns the given 2d vector transformed by this rotation.\nReturns the given vector transformed by this scale.\nReturns the given vector transformed by this matrix.\nReturns the given 2d vector transformed by this rotation …\nReturns the given 2d vector transformed by this matrix.\nReturns the given 3d vector transformed by this rotation.\nReturns the given 3d vector transformed by this matrix.\nReturns the same box, translated by a vector.\nReturns the same box3d, translated by a vector.\nReturns the same rectangle, translated by a vector.\nCreate a 2d translation transform:\nCreate a 3d translation transform:\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nReturns the vector with length of one unit.\nReturns the vector with length of one unit.\nComputes the union of two boxes.\nComputes the union of two boxes.\nCreates a rotation around from a quaternion representation …\nConvenience constructor.\nConvenience constructor.\nReturns the vector part (i, j, k) of this quaternion.\nReturns result of multiplication of all components\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis.\nReturns the same transform with a different destination …\nReturns the same transform with a different destination …\nReturn this vector scaled to fit the provided length.\nReturn this vector capped to a maximum length.\nReturn this vector capped to a maximum length.\nReturn this vector with a minimum length applied.\nReturn this vector with a minimum length applied.\nReturns the same transform with a different source unit.\nReturns the same transform with a different source unit.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nReturns a 2d point using this point’s x and y coordinates\nReturns a 2d vector using this vector’s x and y …\nReturns a 2d vector using this vector’s x and y …\nReturns a 2d point using this point’s x and z coordinates\nReturns a 2d vector using this vector’s x and z …\nReturns a 2d vector using this vector’s x and z …\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nSwap x and y.\nSwap x and y.\nReturns a 2d point using this point’s x and z coordinates\nReturns a 2d vector using this vector’s x and z …\nReturns a 2d vector using this vector’s y and z …\nThe <code>z</code> (traditionally, depth) coordinate.\nConstructor, setting all sides to zero.\nConstructor, setting all sides to zero.\nThe same as <code>Point2D::origin</code>.\nThe same as <code>Point3D::origin</code>.\nConstructor, setting all sides to zero.\nConstructor, setting all sides to zero.\nThe same as <code>Zero::zero</code> but available without importing …\nThe same as <code>Zero::zero</code> but available without importing …\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nApply the function <code>f</code> to each pair of components of this …\nApply the function <code>f</code> to each pair of components of this …\nApply the function <code>f</code> to each pair of components of this …\nApply the function <code>f</code> to each pair of components of this …\nTrait for testing approximate equality\nDefault epsilon value\nReturns <code>true</code> if this object is approximately equal to the …\nReturns <code>true</code> if this object is approximately equal to the …\nAngle in radians\nThe extent of the element in the <code>U</code> units along the <code>z</code> axis.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis.\nComponent multiplied by the imaginary number <code>i</code>.\nComponent multiplied by the imaginary number <code>j</code>.\nComponent multiplied by the imaginary number <code>k</code>.\nThe real part.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>z</code> (traditionally, depth) coordinate.\nDefines the smallest integer equal or greater than the …\nDefines the biggest integer equal or lower than the …\nDefines the nearest integer value to the original value.\nRounds to the smallest integer equal or greater than the …\nRounds to the biggest integer equal or lower than the …\nRounds to the nearest integer value.\nA flattening iterator for quadratic bézier segments.\nA flattening iterator for quadratic bézier segments.\nA 2d curve segment defined by three points: the beginning …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommon APIs to segment types.\nReturn the curve after the split point.\nCompute the length of the segment using a flattened …\nReturn the curve before the split point.\nSample the derivative at t (expecting t between 0 and 1).\nSample x derivative at t (expecting t between 0 and 1).\nSample y derivative at t (expecting t between 0 and 1).\nSwap the direction of the segment.\nApproximates the curve with sequence of line segments.\nStart of the curve.\nSample the curve at t (expecting t between 0 and 1).\nSplit this curve into two sub-curves.\nReturn the curve inside a given range of t.\nEnd of the curve.\nSample x at t (expecting t between 0 and 1).\nSample y at t (expecting t between 0 and 1).\nAngle between vectors v1 and v2 (oriented clockwise …\nAn iterator that consumes <code>Event</code> iterator and yields …\nAn iterator that consumes an iterator of <code>Point</code>s and …\nAn extension trait for <code>PathEvent</code> iterators.\nApplies a 2D transform to a path iterator and yields the …\nReturns an iterator that turns curves into line segments.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate the iterator.\nCreates a new transformed path iterator from a path …\nReturns an iterator applying a 2D transform to all of its …\nAn angle in radians (f32).\nAlias for <code>euclid::default::Box2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Point2D&lt;f32&gt;</code>.\nAlias for <code>euclid::default::Rotation2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Scale&lt;f32&gt;</code>\nAlias for <code>euclid::default::Size2D&lt;f32&gt;</code>.\nAlias for <code>euclid::default::Transform2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Translation2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Point2D&lt;f32&gt;</code>.\nAngle in radians\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nShorthand for <code>Point::new(x, y)</code>.\nShorthand for <code>Size::new(x, y)</code>.\nShorthand for <code>Vector::new(x, y)</code>.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe default builder for <code>Path</code>.\nA builder for <code>Path</code> with custom attributes.\nAn iterator of endpoint and control point ids for <code>Path</code> and …\nAn iterator for <code>Path</code> and <code>PathSlice</code>.\nAn iterator for <code>Path</code> and <code>PathSlice</code>.\nA simple path data structure.\nA view on a <code>Path</code>.\nAn iterator of over a <code>Path</code> traversing the path in reverse.\nA Builder that appends a path to an existing PathBuffer.\nA Builder that appends a path to an existing PathBuffer, …\nIterator over the paths in a <code>PathBufferSlice</code>.\nAn object that stores multiple paths contiguously.\nA view on a <code>PathBuffer</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA view over a sequence of endpoint IDs forming a polygon.\nAn iterator of <code>Event&lt;EndpointId, ()&gt;</code>.\nAn iterator of <code>PathEvent</code>.\nA view over a sequence of endpoints forming a polygon.\nAn iterator of <code>IdEvent</code> for <code>Polygon</code>.\nAn iterator of <code>Event&lt;&amp;Endpoint, ()&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilds a path.\nThe base path building interface.\nAn extension trait for <code>PathEvent</code> iterators.\nThe type of object that is created by this builder.\nA path building interface that tries to stay close to SVG…\nAdds a sub-path containing a circle.\nAdds a sub-path containing an ellipse.\nAdds a sub-path containing a single line segment.\nAdds a sub-path containing a single point.\nAdds a sub-path from a polygon.\nAdds a sub-path from a polygon.\nAdds a sub-path containing a rectangle.\nAdds a sub-path containing a rectangle.\nAdds an elliptical arc.\nStarts a new sub-path at a given position.\nBuilds a path object, consuming the builder.\nEnds the current sub-path by connecting it back to its …\nCloses the current sub path.\nAdds a cubic bézier curve to the current sub-path.\nAdds a cubic bézier segment to the current sub-path.\nEnds the current sub path.\nReturns a builder that approximates all curves with …\nReturns an iterator that turns curves into line segments.\nAdds an horizontal line segment.\nAdds a line segment to the current sub-path.\nAdds a line segment to the current sub-path.\nStart a new sub-path at the given position.\nApplies the provided path event.\nAdds a quadratic bézier curve to the current sub-path.\nAdds a quadratic bézier segment to the current sub-path.\nEquivalent to <code>arc_to</code> in relative coordinates.\nEquivalent to <code>cubic_bezier_to</code> in relative coordinates.\nAdds an horizontal line segment in relative coordinates.\nEquivalent to <code>line_to</code> in relative coordinates.\nEquivalent to <code>move_to</code> in relative coordinates.\nEquivalent to <code>quadratic_bezier_to</code> in relative coordinates.\nAdds a vertical line segment in relative coordinates.\nHints at the builder that a certain number of endpoints …\nHints at the builder that a certain number of endpoints …\nEquivalent to <code>cubic_bezier_to</code> with implicit first control …\nEquivalent to <code>quadratic_bezier_to</code> with implicit control …\nEquivalent to <code>smooth_cubic_bezier_to</code> in relative …\nEquivalent to <code>smooth_quadratic_bezier_to</code> in relative …\nReturns a builder that applies the given transformation to …\nReturns an iterator applying a 2D transform to all of its …\nAdds a vertical line segment.\nReturns a builder that support SVG commands.\nA bevelled corner.\nThe stroke for each sub-path does not extend beyond its …\nA <code>Gradient</code> color.\nThe shape used at the end of open subpaths when they are …\nThe dash pattern used when stroking the line.\nThe shape used at the corners of paths or basic shapes …\nA sharp corner.\nAt the end of each sub-path, the shape representing the …\nA round corner.\nA solid <code>Color</code>.\nAt the end of each sub-path, the shape representing the …\nThe style of a stroke.\nThe coloring style of some drawing.\nThe shape to be used at the end of open subpaths when they …\nThe dash pattern used when stroking the line.\nThe shape to be used at the corners of paths or basic …\nThe offset of <code>LineDash::segments</code> to start the pattern.\nThe alternating lengths of lines and gaps which describe …\nThe color or gradient of the stroke.\nThe distance between the two edges of the stroke.\nA fill which linearly interpolates colors along a …\nA linear gradient.\nA linear gradient interpolates colors along a direction …\nPacked <code>Gradient</code> data for use in shader code.\nAdds a new <code>ColorStop</code>, defined by an offset and a color, to …\nAdds multiple <code>ColorStop</code>s to the gradient.\nThe absolute ending position of the gradient.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Linear</code> builder.\nCreates a new <code>Packed</code> gradient for use in shader code.\nPacks the <code>Gradient</code> for use in shader code.\nThe absolute starting position of the gradient.\n<code>ColorStop</code>s along the linear gradient direction.\nA raster or vector image.\nA raster image.\nA vector image.\nTries to load an image by its <code>Handle</code>.\nThe bounds of the image.\nThe bounds of the image.\nThe image handle\nThe handle of a vector image.\nPixel is 8-bit alpha\nAnimationDecoder trait\nAn Image in AVIF format.\nPixel contains 8-bit B, G and R channels\nPixel is 8-bit BGR with an alpha channel\nAn Image in BMP Format\nAn Image in BMP Format\nThe number of channels of this pixel type.\nA string that can help to interpret the meaning each …\nThis pixel has the format of one of the predefined …\nPixel is 8-bit CMYK\nAn enumeration over supported color types and bit depths\nThe maximum value for this type of primitive within the …\nThe minimum value for this type of primitive within the …\nAn Image in DDS Format\nAn error was encountered while decoding.\nThe delay of a frame relative to the previous one.\nA Dynamic Image\nTypes which are safe to treat as an immutable byte slice …\nAn error was encountered while encoding.\nContains the error value\nAn enumeration of color types encountered in image formats.\nAn Image in farbfeld Format\nAn Image in farbfeld Format\nA flat buffer over a (multi channel) image.\nA single animation frame\nAn implementation dependent iterator, reading the frames …\nA trait for manipulating images.\nTrait to inspect an image.\nAn Image in GIF Format\nAn Image in GIF Format\nSendable grayscale + alpha channel image buffer\nSendable grayscale image buffer\nAn Image in Radiance HDR Format\nAn Image in ICO Format\nAn Image in ICO Format\nGeneric image buffer\nThe trait that all decoders implement\nSpecialized image decoding not be supported by all formats\nThe trait all encoders implement\nThe generic error type for image operations.\nAn enumeration of supported image formats. Not all formats …\nEach pixel in this image is 16-bit Luma\nEach pixel in this image is 8-bit Luma\nEach pixel in this image is 16-bit Luma with alpha\nEach pixel in this image is 8-bit Luma with alpha\nAn enumeration of supported image formats for encoding.\nResult of an image decoding/encoding process\nEach pixel in this image is 16-bit Rgb\nEach pixel in this image is 32-bit float Rgb\nEach pixel in this image is 8-bit Rgb\nEach pixel in this image is 16-bit Rgb with alpha\nEach pixel in this image is 32-bit float Rgb with alpha\nEach pixel in this image is 8-bit Rgb with alpha\nAn error occurred while interacting with the environment.\nAn Image in JPEG Format\nAn Image in JPEG Format with specified quality, up to 100\nPixel is 1-bit luminance\nPixel is 16-bit luminance\nPixel is 16-bit luminance\nPixel is 2-bit luminance\nPixel is 4-bit luminance\nPixel is 8-bit luminance\nPixel is 8-bit luminance\nPixel is 1-bit luminance with an alpha channel\nPixel is 16-bit luminance with an alpha channel\nPixel is 16-bit luminance with an alpha channel\nPixel is 2-bit luminance with an alpha channel\nPixel is 4-bit luminance with an alpha channel\nPixel is 8-bit luminance with an alpha channel\nPixel is 8-bit luminance with an alpha channel\nCompleting the operation would have required more …\nGrayscale colors.\nGrayscale colors + alpha channel\nContains the success value\nAn Image in OpenEXR Format\nAn Image in OpenEXR Format\nAn error was encountered in input arguments.\nA generalized pixel.\nThe type of pixel.\nThe pixel with an associated <code>ColorType</code>. Not all possible …\nImmutable pixel iterator\nAn Image in PNG Format\nAn Image in PNG Format\nAn Image in general PNM Format\nAn Image in one of the PNM Formats\nThe type of each channel in a pixel. For example, this can …\nRepresents the progress of an image operation.\nAn Image in QOI format.\nAn image in QOI Format\nThe type of reader produced by <code>into_reader</code>.\nRGB colors.\nPixel contains 1-bit R, G and B channels\nPixel is 16-bit RGB\nPixel contains 16-bit R, G and B channels\nPixel contains 2-bit R, G and B channels\nPixel is 32-bit float RGB\nPixel is 32-bit float RGB\nAn image buffer for 32-bit float RGB pixels, where the …\nPixel contains 4-bit R, G and B channels\nPixel contains 8-bit R, G and B channels\nPixel contains 8-bit R, G and B channels\nSendable Rgb image buffer\nRGB colors + alpha channel\nPixel is 1-bit RGB with an alpha channel\nPixel is 16-bit RGBA\nPixel is 16-bit RGB with an alpha channel\nPixel is 2-bit RGB with an alpha channel\nPixel is 32-bit float RGBA\nPixel is 32-bit float RGBA\nAn image buffer for 32-bit float RGBA pixels, where the …\nPixel is 4-bit RGB with an alpha channel\nPixel is 8-bit RGB with an alpha channel\nPixel is 8-bit RGB with an alpha channel\nSendable Rgb + alpha channel image buffer\nA View into another image\nThe scalar type that is used to store each channel in this …\nAn Image in TGA Format\nAn Image in TGA Format\nAn Image in TIFF Format\nAn Image in TIFF Format\nPixel is of unknown color type with the specified bits per …\nAn operation can not be completed by the chosen …\nA value for signalling an error: An unsupported format was …\nAn Image in WEBP Format\nAn image in WebP Format.\nAdjust the contrast of this image. <code>contrast</code> is the amount …\nReturn all ImageFormats\nApply the function <code>f</code> to each channel of this pixel.\nApply the function <code>f</code> to each channel of this pixel and …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nGet the bytes of this value.\nReturn this image’s pixels as a native endian byte slice.\nReturn a view on the raw sample buffer.\nReturn a view on the raw sample buffer for 32bit per …\nReturn a mutable view on the raw sample buffer.\nReturn a view on the raw sample buffer for 16 bit per …\nReturn a view on the raw sample buffer for 8 bit per …\nReturn a reference to an 16bit Grayscale image\nReturn a reference to an 8bit Grayscale image\nReturn a reference to an 16bit Grayscale image with an …\nReturn a reference to an 8bit Grayscale image with an …\nGet a mutable reference based version.\nReturn a mutable reference to an 16bit Grayscale image\nReturn a mutable reference to an 8bit Grayscale image\nReturn a mutable reference to an 16bit Grayscale image …\nReturn a mutable reference to an 8bit Grayscale image with …\nReturn a mutable reference to an 16bit RGB image\nReturn a mutable reference to an 32bit RGB image\nReturn a mutable reference to an 8bit RGB image\nReturn a mutable reference to an 16bit RGBA image\nReturn a mutable reference to an 16bit RGBA image\nReturn a mutable reference to an 8bit RGBA image\nView the samples as a slice.\nReturns the underlying raw buffer\nGet a reference based version.\nReturn a reference to an 16bit RGB image\nReturn a reference to an 32bit RGB image\nReturn a reference to an 8bit RGB image\nReturn a reference to an 16bit RGBA image\nReturn a reference to an 32bit RGBA image\nReturn a reference to an 8bit RGBA image\nView the samples as a slice.\nView this buffer as an image over some type of pixel.\nInterpret this buffer as a mutable image.\nView this buffer but keep mutability at a sample level.\nReturns the number of bits contained in a pixel of …\nBlend the color of a given pixel into ourself, taking into …\nPut a pixel at location (x, y), taking into account alpha …\nPut a pixel at location (x, y), taking into account alpha …\nPerforms a Gaussian blur on this image. <code>sigma</code> is a measure …\nThe bounding rectangle of this image.\nTuple of bounds in the order of coordinate inputs.\nBrighten the pixels of this image. <code>value</code> is the amount to …\nIterators and other auxiliary structure for the <code>ImageBuffer</code>…\nReturns the image buffer\nReturns a mutable image buffer\nReturns the number of bytes contained in a pixel of …\nReturn if the ImageFormat can be decoded by the lib.\nReturn if the ImageFormat can be encoded by the lib.\nChange the coordinates of this subimage.\nReturns the number of color channels that make up this …\nGet the number of channels for colors of this type.\nReturns the components as a slice.\nReturns the channels of this pixel as a 4 tuple. If the …\nReturns the components as a mutable slice\nEncoding and decoding for various image file formats.\nSteps through the iterator from the current frame until …\nReturn this image’s color type.\nSupplementary color information.\nReturns the color type of the image data produced by this …\nExamples\nCopies all of the pixels from another image into this …\nCopies all of the pixels from one part of this image to …\nReturn a cut-out of this image delimited by the bounding …\nReturn a cut-out of this image delimited by the bounding …\nA measure of completed decoding.\nDelay of this frame\nReturns a tuple containing the width and height of the …\nThe width and height of this image.\nThe width and height of this image.\nEnumerates over the pixels of the image. The iterator …\nEnumerates over the pixels of the image. The iterator …\nEnumerates over the rows of the image. The iterator yields …\nEnumerates over the rows of the image. The iterator yields …\nContains detailed error representation.\nExpands a color palette by re-using the existing buffer. …\nReturn a list of applicable extensions for this format.\nGet the dimensions <code>(channels, width, height)</code>.\nFilters this image with the specified 3x3 kernel.\nCheck if a buffer of length <code>len</code> is large enough.\nImage representations for ffi.\nFlip this image horizontally\nFlip this image vertically\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.")
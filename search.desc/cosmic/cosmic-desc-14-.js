searchState.loadedDescShard("cosmic", 14, "Menu background\nMenu border color\nMenu border radius\nMenu border width\nDescription text color\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBackground when hovered\nText color when hovered\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Menu</code> with the given <code>State</code>, a list of …\nCreates a new <code>State</code> for a <code>Menu</code>.\nTurns the <code>Menu</code> into an overlay <code>Element</code> at the given target …\nSets the <code>Padding</code> of the <code>Menu</code>.\nBackground when selected\nText color when selected\nMenu text color\nSets the text [<code>LineHeight</code>] of the <code>Menu</code>.\nSets the text size of the <code>Menu</code>.\nSets the width of the <code>Menu</code>.\nThe theme catalog of a <code>PickList</code>.\nThe item class of the <code>Catalog</code>.\nThe default gap.\nThe default padding.\nA widget for selecting a single value from a list of …\nA list for a multi-list dropdown widget.\nA model for managing the options in a multi-list dropdown.\nThe appearance of a pick list.\nThe <code>Background</code> of the pick list.\nThe <code>Border</code> of the pick list.\nThe default class produced by the <code>Catalog</code>.\nThe default class for the menu of the <code>PickList</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe handle <code>Color</code> of the pick list.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>List</code> for a multi-list dropdown widget.\nCreate a <code>Model</code> for a multi-list dropdown.\nCreates a new <code>Dropdown</code> with the given list of selections, …\nThe placeholder <code>Color</code> of the pick list.\nThe <code>Style</code> of a class with the given status.\nThe text <code>Color</code> of the pick list.\nA dropdown menu with multiple lists.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTurns the <code>Menu</code> into an overlay <code>Element</code> at the given target …\nSets the <code>Padding</code> of the <code>Menu</code>.\nSets the text [<code>LineHeight</code>] of the <code>Menu</code>.\nSets the text size of the <code>Menu</code>.\nSets the width of the <code>Menu</code>.\nResponsively generates rows of widgets based on the …\nResponsively generates rows and columns of widgets based …\nDefines how content will be aligned horizontally.\nSets the space between each column of items.\nDefines how the content will be justified.\nDefines how content will be aligned vertically.\nSets the max width\nSets minimum width of items that grow.\nSets the padding around the widget.\nSets the space between each item in a row.\nSets the space between each column and row.\nSets the width.\nArrange widgets with a grid layout.\nResponsively generates rows and columns of widgets based …\nAlignment across columns\nSets the space between each column of items.\nReturns the argument unchanged.\nSets the height of the grid.\nCalls <code>U::from(self)</code>.\nDefines how the content will be justified.\nSets the max width\nSets the padding around the widget.\nAttach a new element with a given grid assignment.\nAttach a new element with custom properties\nAlignment across rows\nSets the space between each item in a row.\nSets the width of the grid.\nDefault fallback using the icon name.\nAn image which may be an SVG or PNG.\nFallback icon to use if the icon was not found.\nFallback to specific icon names.\nDraw an icon in the given bounds via the runtime’s …\nSets the <code>fallback</code> field of this struct.\nChecks for a fallback if the icon was not found.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an icon handle from its XDG icon name.\nCreate an icon handle from its path.\nCreate an image handle from memory.\nCreate an image handle from RGBA data, where you must …\nCreate a SVG handle from memory.\nCreate an <code>Icon</code> from a pre-existing <code>Handle</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nName of icon to locate in an XDG icon path.\nSets the <code>prefer_svg</code> field of this struct.\nPrioritizes SVG over PNG\nSets the <code>scale</code> field of this struct.\nRestrict the lookup to a given scale.\nSets the <code>size</code> field of this struct.\nRestrict the lookup to a given size.\nSets the <code>symbolic</code> field of this struct.\nSets the <code>symbolic</code> field of this struct.\nWhether the icon is symbolic or not.\nThe theme catalog of a <code>Container</code>.\nThe item class of the <code>Catalog</code>.\nAn element decorating some content.\nThe appearance of a container.\nThe <code>Background</code> of the container.\nThe <code>Border</code> of the container.\nThe default class produced by the <code>Catalog</code>.\nThe icon <code>Color</code> of the container.\nThe <code>Shadow</code> of the container.\nThe <code>Style</code> of a class with the given status.\nThe text <code>Color</code> of the container.\nA handle pointing to some encoded image bytes in-memory.\nImage filtering strategy.\nA handle of some image data.\nA frame that displays an image while keeping aspect ratio.\nBilinear interpolation.\nNearest neighbor.\nA file handle. The image data will be read from the file …\nA handle pointing to decoded image pixels in RGBA format.\nA frame that displays an image with the ability to zoom …\nDraws an <code>Image</code>\nComputes the layout of an <code>Image</code>.\nZoom and pan on an image.\nCreates a new <code>Viewer</code> with the given image <code>Handle</code>.\nThe height of the image.\nThe id of this handle.\nThe pixels.\nThe width of the image.\nThe local state of a <code>Viewer</code>.\nA frame that displays an image with the ability to zoom …\nReturns the bounds of the underlying image, given the …\nThe theme catalog of a <code>Container</code>.\nThe item class of the <code>Catalog</code>.\nAn element decorating some content.\nThe appearance of a container.\nSets the content alignment for the horizontal axis of the …\nSets the content alignment for the vertical axis of the …\nThe <code>Background</code> of the container.\nThe <code>Border</code> of the container.\nCenters the contents in the horizontal and vertical axis …\nCenters the contents in the horizontal axis of the …\nCenters the contents in the vertical axis of the …\nSets the style of the <code>LayerContainer</code>.\nThe default class produced by the <code>Catalog</code>.\nSets the height of the <code>LayerContainer</code>.\nThe icon <code>Color</code> of the container.\nSets the [<code>Layer</code>] of the <code>LayerContainer</code>.\nSets the maximum height of the <code>LayerContainer</code> in pixels.\nSets the maximum width of the <code>LayerContainer</code>.\nSets the <code>Padding</code> of the <code>LayerContainer</code>.\nThe <code>Shadow</code> of the container.\nThe <code>Style</code> of a class with the given status.\nThe text <code>Color</code> of the container.\nSets the width of the [<code>self.</code>].\nSets the style variant of this [<code>Circular</code>].\nRepresents a button menu item.\nRepresents a button menu item that is disabled.\nRepresents a checkbox menu item.\nThe condition of when to close a menu\nRepresents a divider between menu items.\nDynamic tries to automatically choose the proper item …\nRepresents a folder menu item.\nDraw the full path,\nRepresents a menu item that performs an action when …\nThe height of an item\nThe width of an item\nOmit the active item if it’s not a menu\nA <code>MenuBar</code> collects <code>MenuTree</code>s and handles all the layout, …\nOmit the active item(the last item in the path)\nMethods for drawing path highlight\nStatic tries to use the width value of each menu(menu tree …\nStatic tries to use <code>MenuTree.height</code> as item height, when it…\nNested menu is essentially a tree of items, a menu is a …\nUse uniform width\nUse uniform height.\nA <code>MenuBar</code> collects <code>MenuTree</code>s and handles all the layout, …\nSets the expand value for each menu’s check bounds\nClose menus when the cursor clicks inside the check bounds\nClose menus when the cursor clicks outside the check bounds\n<code>CloseCondition</code>\nMoves each menu in the horizontal open direction\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the height of the <code>MenuBar</code>\nSets the height of the menu tree. See <code>ItemHeight</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ItemHeight</code>\n<code>ItemWidth</code>\nCreate a list of menu items from a vector of <code>MenuItem</code>.\nClose menus when the cursor moves outside the check bounds\nMoves all the menus in the vertical open direction\nCreates a new <code>MenuBar</code> with the given menu roots\nCreate a new menu tree from a widget\nSets the <code>Padding</code> of the <code>MenuBar</code>\nSets the method for drawing path highlight\nCreate a root menu item.\nSets the spacing between menu roots\nSets the style of the menu bar and its menus\nSets the width of the <code>MenuBar</code>\nSets the width of the menu tree. See <code>ItemWidth</code>\nCreate a menu tree from a widget and a vector of sub trees\n<code>MenuAction</code> is a trait that represents an action in a menu.\nThe type of message that will be produced when the action …\nReturns a message of type <code>Self::Message</code> when the action is …\nRepresents a combination of a key and modifiers. It is …\nRepresents the modifier keys on a keyboard.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key for the key binding.\nChecks if the given key and modifiers match the <code>KeyBind</code>.\nA vector of modifiers for the key binding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPre-convert this widget into the <code>Container</code> widget that it …\nNavigation side panel for switching between views.\nNavigation side panel for switching between views. Can …\nEmitted when a tab close button is pressed.\nEmitted when a button is right-clicked.\nHandle the dnd drop event.\nHandle the dnd enter event.\nHandle the dnd leave event.\nEmitted when the middle mouse button is pressed on a …\nAll panes are visible\nA fixed reference line for the measurement of coordinates.\nBottom edge.\nA <code>Pane</code> was picked and then dropped outside of other <code>Pane</code> …\nThe theme catalog of a <code>PaneGrid</code>.\nCenter region.\nThe item class of this <code>Catalog</code>.\nThe arrangement of a <code>PaneGrid</code>.\nThe content of a <code>Pane</code>.\nThe visible contents of the <code>PaneGrid</code>\nThe controls of a <code>Pane</code>.\nA four cardinal direction.\n↓\nAn event produced during a drag and drop interaction of a …\nA pane that can be dragged.\nA <code>Pane</code> was dropped on top of another <code>Pane</code>.\nThe edges of an area.\nAn <code>Edge</code> of the full <code>PaneGrid</code>.\nEdge region.\nThe appearance of a highlight of the <code>PaneGrid</code>.\nThe horizontal axis: —\n←\nLeft edge.\nA line.\nA maximized pane is visible\nA layout node of a <code>PaneGrid</code>.\nA rectangular region in a <code>PaneGrid</code> used to display widgets.\nA <code>Pane</code>.\nThe region of this <code>Node</code> is taken by a <code>Pane</code>.\nA single <code>Pane</code> of the <code>PaneGrid</code>.\nA collection of panes distributed using either vertical or …\nA <code>Pane</code> was picked for dragging.\nThe region of a <code>Pane</code>.\nAn event produced during a resize interaction of a <code>PaneGrid</code>…\n→\nRight edge.\nA divider that splits a region in a <code>PaneGrid</code> into two …\nA split of the available space.\nThe region of this <code>Node</code> is split into two.\nThe state of a <code>PaneGrid</code>.\nThe appearance of a <code>PaneGrid</code>.\nA styling function for a <code>PaneGrid</code>.\nThe <code>Target</code> area a pane can be dropped on.\nThe title bar of a <code>Pane</code>.\nTop edge.\n↑\nThe vertical axis: |\nThe <code>Background</code> of the pane region.\nThe <code>Border</code> of the pane region.\nReturns whether the <code>Draggable</code> with the given <code>Layout</code> can be …\nThe <code>Color</code> of the <code>Line</code>.\nThe default style of a <code>PaneGrid</code>.\nThe default class produced by this <code>Catalog</code>.\nThe appearance of a hovered region highlight.\nThe appearance of a hovered split.\nThe internal state of the <code>PaneGrid</code>.\nThe panes of the <code>PaneGrid</code>.\nThe appearance of a picked split.\nThe new ratio of the <code>Split</code>.\nThe <code>Split</code> that is being dragged for resizing.\nThe state of a <code>PaneGrid</code>.\nThe <code>Style</code> of a class with the given status.\nThe width of the <code>Line</code>.\nThe left/top <code>Configuration</code> of the split.\nThe direction of the split.\nThe right/bottom <code>Configuration</code> of the split.\nThe ratio of the split in [0.0, 1.0].\nThe picked <code>Pane</code>.\nThe picked <code>Pane</code>.\nThe picked <code>Pane</code>.\nThe <code>Target</code> where the picked <code>Pane</code> was dropped on.\nThe left/top <code>Node</code> of the split.\nThe direction of the split.\nThe right/bottom <code>Node</code> of the split.\nThe <code>Split</code> of this <code>Node</code>.\nThe ratio of the split in [0.0, 1.0].\nThe current action of a <code>PaneGrid</code>.\nA <code>Pane</code> in the <code>PaneGrid</code> is being dragged.\nThe <code>PaneGrid</code> is idle.\nThe internal state of a <code>PaneGrid</code>.\nA <code>Split</code> in the <code>PaneGrid</code> is being dragged.\nThe state of a <code>PaneGrid</code>.\nThe internal state of the <code>PaneGrid</code>.\nThe panes of the <code>PaneGrid</code>.\nThe <code>Axis</code> of the <code>Split</code>.\nThe starting <code>Point</code> of the drag interaction.\nThe <code>Pane</code> being dragged.\nThe <code>Split</code> being dragged.\nThe theme catalog of a <code>Container</code>.\nThe item class of the <code>Catalog</code>.\nThe appearance of a container.\nThe <code>Background</code> of the container.\nThe <code>Border</code> of the container.\nThe default class produced by the <code>Catalog</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe icon <code>Color</code> of the container.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA modal popup interrupts user inputs and demands action.\nEmitted when the popup is closed.\nThe <code>Shadow</code> of the container.\nThe <code>Style</code> of a class with the given status.\nThe text <code>Color</code> of the container.\nThe theme catalog of a <code>ProgressBar</code>.\nThe item class of the <code>Catalog</code>.\nA bar that displays progress.\nThe appearance of a progress bar.\nA styling function for a <code>ProgressBar</code>.\nThe <code>Background</code> of the progress bar.\nThe <code>Background</code> of the bar of the progress bar.\nThe <code>Border</code> of the progress bar.\nThe danger style of a <code>ProgressBar</code>.\nThe default class produced by the <code>Catalog</code>.\nThe primary style of a <code>ProgressBar</code>.\nThe secondary style of a <code>ProgressBar</code>.\nThe <code>Style</code> of a class with the given status.\nThe success style of a <code>ProgressBar</code>.\nThe theme catalog of a <code>Radio</code>.\nThe item class of the <code>Catalog</code>.\nThe default size of a <code>Radio</code> button.\nThe default spacing of a <code>Radio</code> button.\nA circular button representing a choice.\nThe default class produced by the <code>Catalog</code>.\nCreates a new <code>Radio</code> button.\nSets the size of the <code>Radio</code> button.\nSets the spacing between the <code>Radio</code> button and the text.\nThe <code>Style</code> of a class with the given status.\nSets the width of the <code>Radio</code> button.\nThe theme catalog of a <code>Container</code>.\nThe item class of the <code>Catalog</code>.\nAn element decorating some content.\nThe appearance of a container.\nget the a11y nodes for the widget\nSets the content alignment for the horizontal axis of the …\nSets the content alignment for the vertical axis of the …\nThe <code>Background</code> of the container.\nThe <code>Border</code> of the container.\nCenters the contents in the horizontal and vertical axis …\nCenters the contents in the horizontal axis of the …\nCenters the contents in the vertical axis of the <code>Container</code>.\nThe default class produced by the <code>Catalog</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the height of the <code>Container</code>.\nThe icon <code>Color</code> of the container.\nSet to true to ignore parent container bounds when …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the maximum height of the <code>Container</code> in pixels.\nSets the maximum width of the <code>Container</code>.\nSets the <code>Padding</code> of the <code>Container</code>.\nThe <code>Shadow</code> of the container.\nThe <code>Style</code> of a class with the given status.\nSets the style of the <code>Container</code>.\nThe text <code>Color</code> of the container.\nSets the width of the [<code>self.</code>].\nA container which aligns its children in a row.\nA pre-allocated <code>row</code>.\nA <code>row</code> that will be assigned a <code>Vec</code> of children.\nAppearance of the segmented button.\nConstructs a new item for the <code>ModelBuilder</code>.\nA unique ID for an item in the <code>Model</code>.\nA newly-inserted item which may have additional actions …\nHorizontal <code>SegmentedButton</code>.\nThe iced identifier of a segmented button.\nAppearance of an item in the segmented button.\nAppearance of an item based on its status.\nThe model held by the application, containing the unique …\nA builder for a <code>Model</code>.\n<code>Model&lt;MultiSelect&gt;</code> permits multiple keys to be active at a …\nMulti-select variant of an <code>EntityMut</code>.\nA model for multi-select button selection.\nAssociates extra data with an external secondary map.\nA conjoined group of items that function together as a …\nIsolates variant-specific behaviors from <code>SegmentedButton</code>.\nDescribes a type that has selectable items.\n<code>Model&lt;SingleSelect&gt;</code> Ensures that only one key may be …\nSingle-select variant of an <code>EntityMut</code>.\nA model for single-select button selection.\nAssociates extra data with an external sparse secondary …\nThe supported style of the <code>StyleSheet</code>.\nDefines the <code>Appearance</code> of a segmented button.\nVertical <code>SegmentedButton</code>.\nActivate an item.\nActivates the newly-inserted item.\nActivates the newly-inserted item.\nActivates the item in the model.\nActivates the item at the given position, returning true …\nThe ID of the active item.\nThe IDs of the active items.\nGet an immutable reference to the data associated with the …\nGet a mutable reference to the data associated with the …\nConsumes the builder and returns the model.\nCreates a builder for initializing a model.\nAlignment of button contents.\nDesired height of a button.\nPadding around a button.\nSpacing between icon and text in button.\nRemoves all items from the model.\nDefines that the close button should appear\nShows a close button for this item.\nShows or hides the item’s close button.\nThe icon used for the close button.\nCheck if an item exists in the map.\nAssigns extra data to the item.\nAssociates data with the item.\nGet an immutable reference to data associated with an item.\nGet a mutable reference to data associated with an item.\nRemoves a specific data type from the item.\nAssociates data with the item.\nDeactivate an item.\nDeactivates the active item.\nDeactivates the item in the model.\nWhether to place dividers between buttons.\nEnable or disable an item.\nGet the item that is located at a given position.\nA command that focuses a segmented item stored in a widget.\nDesired font for active tabs.\nDesired font for hovered tabs.\nDesired font for inactive tabs.\nSize of the font.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the drag id of the destination.\nDesired height of the widget.\nHorizontal implementation of the <code>SegmentedButton</code>.\nThe horizontal <code>Appearance</code> of the segmented button.\nDefines an icon for the item.\nDefine an icon for the item.\nImmutable reference to the icon associated with the item.\nRemoves the icon from an item.\nSets a new icon for an item.\nReturns the ID of the item that was inserted.\niced widget ID\nSpacing for each indent.\nInserts a new item and its associated data into the model.\nInserts a new item in the model.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the item is active.\nCheck if the given ID is the active ID.\nWhether the item should contain a close button.\nCheck if the item is enabled.\nIterates across items in the model in the order that they …\nLineHeight of the font.\nMaximum width of a button.\nMinimum width of a button.\nCreates a custom <code>Id</code>.\nEmitted when a tab is pressed.\nEmitted when a tab close button is pressed.\nEmitted when a button is right-clicked.\nHandle the dnd drop event.\nHandle the dnd enter event.\nHandle the dnd leave event.\nEmitted when the middle mouse button is pressed on a …\nPadding of the whole widget.\nDefine the position of the newly-inserted item.\nDefine the position of the item.\nThe position of the item in the model.\nChange the position of an item in the model.\nSwap the position with another item in the model.\nSwap the position with another item in the model.\nSwap the position of two items in the model.\nRemoves an item from the model.\nScrolling switches focus between tabs.\nAssociates extra data with an external secondary map.\nAssociates extra data with an external secondary map.\nAssociates extra data with an external sparse secondary …\nAssociates extra data with an external sparse secondary …\nShow the close icon only when item is hovered.\nDesired spacing between items.\nStyle to draw the widget in.\nDefines the text for the item.\nDefines the text for the item.\nImmutable reference to the text assigned to the item.\nRemoves text from an item.\nSets new text for an item.\nCreates a unique <code>Id</code>.\nGet the appearance for this variant of the widget.\nCalculates the bounds for visible buttons.\nCalculates the layout of this variant.\nVertical implementation of the <code>SegmentedButton</code>.\nThe vertical <code>Appearance</code> of the segmented button.\nDesired width of the widget.\nCalls a function with the ID\nCalls a function with the ID without consuming the wrapper.\nA selection of multiple choices appearing as a conjoined …\nA selection of multiple choices appearing as a conjoined …\nA column with a predefined style for creating a settings …\nA builder for a settings item.\nCreates a builder for an item, beginning with the title.\nAssigns a control to the item.\nA description to display beneath the title.\nAssigns a control which flexes.\nA settings item aligned in a flex row\nA settings item aligned in a flex row\nReturns the argument unchanged.\nA custom icon to display before the text.\nCalls <code>U::from(self)</code>.\nA settings item aligned in a row\nA settings item aligned in a row\nDescribes the item being controlled.\nAdd a child element to the section’s list column.\nAdd a child element to the section’s list column, if <code>Some</code>…\nExtends the <code>Section</code> with the given children.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA section within a settings view column.\nDefine an optional title for the section.\nA section within a settings view column.\nA section with a pre-defined list column.\nThe <code>Slider</code> can be interacted with.\nThe appearance of slider breakpoints.\nThe theme catalog of a <code>Slider</code>.\nA circular handle.\nThe item class of the <code>Catalog</code>.\nThe <code>Slider</code> is being dragged.\nLinear gradient for the background of the rail includes an …\nThe appearance of the handle of a slider.\nThe shape of the handle of a slider.\nThe <code>Slider</code> is being hovered.\nStart and end colors of the rail\nThe appearance of a slider rail\nThe background color of the rail\nA rectangular shape.\nAn horizontal bar and a handle that selects a single value …\nThe possible status of a <code>Slider</code>.\nThe appearance of a slider.\nA styling function for a <code>Slider</code>.\nThe <code>Background</code> of the handle.\nThe backgrounds of the rail of the slider.\nThe border of the rail.\nThe border <code>Color</code> of the handle.\nThe border width of the handle.\nThe appearance of breakpoints.\nThe color of the slider breakpoint.\nThe default style of a <code>Slider</code>.\nThe default class produced by the <code>Catalog</code>.\nThe appearance of the <code>Handle</code> of the slider.\nThe colors of the rail of the slider.\nThe shape of the handle.\nThe <code>Style</code> of a class with the given status.\nThe width of the stroke of a slider rail.\nThe border radius of the corners of the rectangle.\nThe height of the rectangle.\nThe radius of the circle.\nThe width of the rectangle.\nLet the widget determin the angle of the gradient\nthe linear gradient of the slider\nHorizontal spin button widget.\nVertical spin button widget.\nDefines the [<code>Appearance</code>] of a cards.\nAppearance of the cards.\nThe default [<code>Appearance</code>] of the cards.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe theme catalog of an <code>Svg</code>.\nThe item class of the <code>Catalog</code>.\nA handle of Svg data.\nThe <code>Svg</code> is being hovered.\nThe <code>Svg</code> is idle.\nThe possible status of an <code>Svg</code>.\nThe appearance of an <code>Svg</code>.\nA styling function for an <code>Svg</code>.\nA vector graphics image.\nThe <code>Color</code> filter of an <code>Svg</code>.\nThe default class produced by the <code>Catalog</code>.\nThe <code>Style</code> of a class with the given status.\nA collection of tabs for developing a tabbed interface.\nA collection of tabs for developing a tabbed interface.\nA bunch of text.\nAvailable presets for text typography\n<code>Text</code> widget with the Body typography preset.\n<code>Text</code> widget with the Caption typography preset.\n<code>Text</code> widget with the Caption Heading typography preset.\nReturns the argument unchanged.\n<code>Text</code> widget with the Heading typography preset.\nCalls <code>U::from(self)</code>.\n<code>Text</code> widget with the Monotext typography preset.\nCreates a new <code>Text</code> widget with the provided content.\n<code>Text</code> widget with the Title 1 typography preset.\n<code>Text</code> widget with the Title 2 typography preset.\n<code>Text</code> widget with the Title 3 typography preset.\n<code>Text</code> widget with the Title 4 typography preset.\nAn interaction with an <code>Editor</code>.\nThe <code>TextEditor</code> can be interacted with.\nDelete the previous character.\nDelete the previous character.\nA binding to an action in the <code>TextEditor</code>.\nThe theme catalog of a <code>TextEditor</code>.\nThe item class of the <code>Catalog</code>.\nClick the <code>Editor</code> at the given <code>Point</code>.\nThe content of a <code>TextEditor</code>.\nCopy the selection of the <code>TextEditor</code>.\nProduce the given message.\nCut the selection of the <code>TextEditor</code>.\nDelete the next character.\nDelete the next character.\nThe <code>TextEditor</code> cannot be interacted with.\nMove to the end of the text.\nMove to the start of the text.\nMove down.\nDrag the mouse on the <code>Editor</code> to the given <code>Point</code>.\nAn action that edits text.\nPerform an <code>Edit</code>.\nMove to the end of the line.\nBreak the current line.\nBreak the current line.\nThe <code>TextEditor</code> is focused.\nMove to the start of the line.\nThe <code>TextEditor</code> is being hovered.\nInsert the given character.\nInsert the given character.\nA key press.\nMove left.\nA cursor movement.\nApply a <code>Motion</code>.\nApply a <code>Motion</code>.\nMove to the start of the next window.\nMove to the start of the previous window.\nPaste the given text.\nPaste the clipboard contents in the <code>TextEditor</code>.\nMove right.\nScroll the <code>Editor</code> a certain amount of lines.\nSelect text with a given <code>Motion</code>.\nSelect text with a given <code>Motion</code>.\nSelect the entire buffer.\nSelect the entire buffer.\nSelect the line at the current cursor.\nSelect the line at the current cursor.\nSelect the word at the current cursor.\nSelect the word at the current cursor.\nA sequence of bindings to execute.\nThe state of a <code>TextEditor</code>.\nThe possible status of a <code>TextEditor</code>.\nThe appearance of a text input.\nA styling function for a <code>TextEditor</code>.\nA multi-line text input.\nUnfocus the <code>TextEditor</code>.\nMove up.\nMove to the left boundary of a word.\nMove to the right boundary of a word.\nThe <code>Background</code> of the text input.\nThe <code>Border</code> of the text input.\nThe default style of a <code>TextEditor</code>.\nThe default class produced by the <code>Catalog</code>.\nThe <code>Color</code> of the icon of the text input.\nThe key pressed.\nThe state of the keyboard modifiers.\nThe <code>Color</code> of the placeholder of the text input.\nThe <code>Color</code> of the selection of the text input.\nThe current <code>Status</code> of the <code>TextEditor</code>.\nThe <code>Style</code> of a class with the given status.\nThe text produced by the key press.\nThe <code>Color</code> of the value of the text input.\nThe amount of lines to scroll.\nThe appearance of a text input.\nThe state of a <code>TextInput</code>.\nThe supported style of the <code>StyleSheet</code>.\nA set of rules that dictate the style of a text input.\nA field that can be filled with text.\nA string which can be sent to the clipboard or …\nProduces the style of an active text input.\nSets the input to be always active. This makes it behave …\nThe <code>Background</code> of the text input.\nThe border <code>Color</code> of the text input.\nThe border offset\nThe border radius of the text input.\nThe border width of the text input.\nTrack the cursor of a text input.\nReturns the <code>Cursor</code> of the <code>TextInput</code>.\nProduces the style of a disabled text input.\nSets the mode of this <code>TextInput</code> to be a drag and drop icon.\nDraws the <code>TextInput</code> with the given <code>Renderer</code>, overriding its\nDraws the <code>TextInput</code> with the given <code>Renderer</code>, overriding its\nA text label whiich can transform into a text input on …\nProduces the style of an errored text input.\nSets the error message of the <code>TextInput</code>.\nProduces a <code>Task</code> that focuses the <code>TextInput</code> with the given …\nFocuses the <code>TextInput</code>.\nProduces the style of a focused text input.\nCreates a new <code>State</code>, representing a focused <code>TextInput</code>.\nSets the <code>Font</code> of the <code>TextInput</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the helper text of the <code>TextInput</code>.\nProduces the style of an hovered text input.\nProduces the style of an hovered text input.\nThe icon <code>Color</code> of the text input.\nSets the <code>Id</code> of the <code>TextInput</code>.\nCreates a new inline <code>TextInput</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the <code>TextInput</code> is currently focused or not.\nSets the text of the <code>TextInput</code>.\nThe label <code>Color</code> of the text input.\nComputes the layout of a <code>TextInput</code>.\nSets the start [<code>Icon</code>] of the <code>TextInput</code>.\nSets the [<code>LineHeight</code>] of the <code>TextInput</code>.\nComputes the current <code>mouse::Interaction</code> of the <code>TextInput</code>.\nProduces a <code>Task</code> that moves the cursor of the <code>TextInput</code> …\nMoves the <code>Cursor</code> of the <code>TextInput</code> to an arbitrary location.\nProduces a <code>Task</code> that moves the cursor of the <code>TextInput</code> …\nMoves the <code>Cursor</code> of the <code>TextInput</code> to the end of the input …\nProduces a <code>Task</code> that moves the cursor of the <code>TextInput</code> …\nMoves the <code>Cursor</code> of the <code>TextInput</code> to the front of the …\nCreates a new <code>TextInput</code>.\nCreates a new <code>State</code>, representing an unfocused <code>TextInput</code>.\nSets the message that should be produced when some text is …\nSets the message that should be produced when some text is …\nSets the message that should be produced when the <code>TextInput</code>…\nMaybe sets the message that should be produced when the …\nSets the <code>Padding</code> of the <code>TextInput</code>.\nConverts the <code>TextInput</code> into a secure password input.\nThe placeholder text <code>Color</code>.\nCreates a new search <code>TextInput</code>.\nCreates a new secure <code>TextInput</code>.\nProduces a <code>Task</code> that selects all the content of the …\nSelects all the content of the <code>TextInput</code>.\nSelects all text when the text input is focused\nThe selected fill <code>Color</code> of the text input.\nReturns the current value of the selected text in the …\nThe text <code>Color</code> of the text input.\nSets the text size of the <code>TextInput</code>.\nSets the style of the <code>TextInput</code>.\nSets the window id of the <code>TextInput</code> and the window id of …\nThe text <code>Color</code> of the text input.\nCreates a new <code>TextInput</code>.\nSets the end [<code>Icon</code>] of the <code>TextInput</code>.\nUnfocuses the <code>TextInput</code>.\nProcesses an <code>Event</code> and updates the <code>State</code> of a <code>TextInput</code> …\nSets the width of the <code>TextInput</code>.\nThe cursor of a text input.\nCursor without a selection\nCursor selecting a range of text\nThe state of a <code>Cursor</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the current selection of the <code>Cursor</code> for the given …\nReturns the <code>State</code> of the <code>Cursor</code>.\nThe end of the selection\nThe start of the selection\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe value of a <code>TextInput</code>.\nReturns the argument unchanged.\nInserts a new <code>char</code> at the given grapheme <code>index</code>.\nInserts a bunch of graphemes at the given grapheme <code>index</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the <code>Value</code> is empty or not.\nReturns the total amount of graphemes in the <code>Value</code>.\nCreates a new <code>Value</code> from a string slice.\nReturns the position of the next end of a word from the …\nReturns the position of the previous start of a word from …\nRemoves the grapheme at the given <code>index</code>.\nRemoves the graphemes from <code>start</code> to <code>end</code>.\nReturns a new <code>Value</code> with all its graphemes replaced with …\nReturns a new <code>Value</code> containing the graphemes from <code>start</code> …\nReturns a new <code>Value</code> containing the graphemes until the …\nAction that can be triggered by the user.\nDuration for the <code>Toast</code>\nRepresent the data used to display a <code>Toast</code>\nSet the <code>Action</code> of this <code>Toast</code>\nSet the <code>Duration</code> of this <code>Toast</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>Toast</code> with the provided message.\nAdd a new <code>Toast</code>\nRemove a <code>Toast</code>\nCreate a new Toaster widget.\nThe tooltip will appear on the bottom of the widget.\nThe tooltip will follow the cursor.\nThe tooltip will appear on the left of the widget.\nThe position of the tooltip. Defaults to following the …\nThe tooltip will appear on the right of the widget.\nThe tooltip will appear on the top of the widget.\nThe <code>Slider</code> can be interacted with.\nThe theme catalog of a <code>Slider</code>.\nA circular handle.\nThe item class of the <code>Catalog</code>.\nThe <code>Slider</code> is being dragged.\nLinear gradient for the background of the rail includes an …\nThe appearance of the handle of a slider.\nThe shape of the handle of a slider.\nThe <code>Slider</code> is being hovered.\nStart and end colors of the rail\nThe background color of the rail\nA rectangular shape.\nThe possible status of a <code>Slider</code>.\nThe appearance of a slider.\nA styling function for a <code>Slider</code>.\nAn vertical bar and a handle that selects a single value …\nThe <code>Background</code> of the handle.\nThe border <code>Color</code> of the handle.\nThe border width of the handle.\nThe appearance of breakpoints.\nThe default style of a <code>Slider</code>.\nThe default class produced by the <code>Catalog</code>.\nThe appearance of the <code>Handle</code> of the slider.\nThe colors of the rail of the slider.\nThe shape of the handle.\nThe <code>Style</code> of a class with the given status.\nThe border radius of the corners of the rectangle.\nThe height of the rectangle.\nThe radius of the circle.\nThe width of the rectangle.\nLet the widget determin the angle of the gradient\nthe linear gradient of the slider\nA custom button that has the desired default spacing and …\nThe message to emit on button press.")